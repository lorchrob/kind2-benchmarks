type Base_Types__Boolean = bool;
type Base_Types__Unsigned = int;
type Base_Types__Unsigned_64 = int;
type Base_Types__Unsigned_32 = int;
type Base_Types__Unsigned_16 = int;
type Base_Types__Unsigned_8 = int;
type Base_Types__Integer = int;
type Base_Types__Integer_64 = int;
type Base_Types__Integer_32 = int;
type Base_Types__Integer_16 = int;
type Base_Types__Integer_8 = int;
type Base_Types__Float = real;
type Base_Types__Float_32 = real;
type Base_Types__Float_64 = real;

node _TOP__measureSpeed(
  __ASSUME__HIST : bool;
  rotate___EVENT_ : bool;
  second___EVENT_ : bool;
  time : real;
  nc : int;
  count : int;
  speed : real
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
  __GUARANTEE1 : bool;
  __GUARANTEE2 : bool;
let
  __GUARANTEE0 = CruiseController__InitiallyHolds((speed = 0.0));

  __GUARANTEE1 = (true -> (second___EVENT_ => (speed = (((3600.0 / 1609.34) * (3.1416 * 0.52)) * real(nc)))));

  __GUARANTEE2 = (true -> ((not second___EVENT_) => (speed = (pre speed))));

  __ASSERT = ((count = (if second___EVENT_ then 0 else nc)) and ((nc = (0 -> ((pre count) + (if rotate___EVENT_ then 1 else 0)))) and (__ASSUME__HIST => (__GUARANTEE2 and (__GUARANTEE1 and __GUARANTEE0)))));

  --%IVC __GUARANTEE0, __GUARANTEE1, __GUARANTEE2;

tel;

node _TOP__setSpeed(
  __ASSUME__HIST : bool;
  __ASSUME0 : bool;
  __ASSUME1 : bool;
  on_off : bool;
  resume_speed : bool;
  set_speed : bool;
  inc : bool;
  dec : bool;
  brake_cancel : bool;
  speed : real;
  time : real;
  off_mode : bool;
  set_condition : bool;
  ready_mode : bool;
  on_mode : bool;
  paused_mode : bool;
  setting_condition : bool;
  increment_condition : bool;
  decrement_condition : bool;
  invariance_condition : bool;
  desired_speed : real;
  enabled : bool
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
  __GUARANTEE1 : bool;
  __GUARANTEE2 : bool;
  __GUARANTEE3 : bool;
  __GUARANTEE4 : bool;
let
  __GUARANTEE0 = (enabled = on_mode);

  __GUARANTEE1 = (setting_condition => (desired_speed = speed));

  __GUARANTEE2 = (true -> (increment_condition => (desired_speed = ((pre desired_speed) + 1.0))));

  __GUARANTEE3 = (true -> (decrement_condition => (desired_speed = ((pre desired_speed) - 1.0))));

  __GUARANTEE4 = (true -> (invariance_condition => (desired_speed = (pre desired_speed))));

  __ASSERT = ((invariance_condition = (((not setting_condition) and (not increment_condition)) and (not decrement_condition))) and ((decrement_condition = (false -> (((pre on_mode) and dec) and ((pre desired_speed) >= (25.0 + 1.0))))) and ((increment_condition = (false -> (((pre on_mode) and inc) and ((pre desired_speed) <= (130.0 - 1.0))))) and ((setting_condition = (false -> ((pre ready_mode) and set_condition))) and ((paused_mode = (false -> ((((pre paused_mode) and (not on_off)) and (not resume_speed)) or ((pre on_mode) and brake_cancel)))) and ((on_mode = (false -> (((((pre on_mode) and (not on_off)) and (not brake_cancel)) or ((pre ready_mode) and set_condition)) or ((pre paused_mode) and resume_speed)))) and ((ready_mode = (false -> ((((pre ready_mode) and (not on_off)) and (not set_condition)) or ((pre off_mode) and on_off)))) and ((set_condition = ((set_speed and (25.0 <= speed)) and (speed <= 130.0))) and ((off_mode = (true -> (((((pre off_mode) and (not on_off)) or ((pre ready_mode) and on_off)) or ((pre on_mode) and on_off)) or ((pre paused_mode) and on_off)))) and ((__ASSUME__HIST => (__GUARANTEE4 and (__GUARANTEE3 and (__GUARANTEE2 and (__GUARANTEE1 and __GUARANTEE0))))) and ((__ASSUME1 = ((((((CruiseController__ToInt(on_off) + CruiseController__ToInt(resume_speed)) + CruiseController__ToInt(set_speed)) + CruiseController__ToInt(inc)) + CruiseController__ToInt(dec)) + CruiseController__ToInt(brake_cancel)) <= 1)) and (__ASSUME0 = (speed >= 0.0)))))))))))));

  --%IVC __GUARANTEE0, __GUARANTEE1, __GUARANTEE2, __GUARANTEE3, __GUARANTEE4;

tel;

node _TOP__controlSpeed(
  __ASSUME__HIST : bool;
  __ASSUME0 : bool;
  speed : real;
  desired_speed : real;
  time : real;
  force : real
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
  __GUARANTEE1 : bool;
let
  __GUARANTEE0 = ((desired_speed <= speed) => (force = 0.0));

  __GUARANTEE1 = (force >= CruiseController__Max(0.0, (0.1 * (desired_speed - speed))));

  __ASSERT = ((__ASSUME__HIST => (__GUARANTEE1 and __GUARANTEE0)) and (__ASSUME0 = (speed >= 0.0)));

  --%IVC __GUARANTEE0, __GUARANTEE1;

tel;

node main(
  measureSpeed__nc : int;
  measureSpeed__count : int;
  measureSpeed__speed : real;
  measureSpeed____ASSUME__HIST : bool;
  setSpeed__off_mode : bool;
  setSpeed__set_condition : bool;
  setSpeed__ready_mode : bool;
  setSpeed__on_mode : bool;
  setSpeed__paused_mode : bool;
  setSpeed__setting_condition : bool;
  setSpeed__increment_condition : bool;
  setSpeed__decrement_condition : bool;
  setSpeed__invariance_condition : bool;
  setSpeed__desired_speed : real;
  setSpeed__enabled : bool;
  setSpeed____ASSUME0 : bool;
  setSpeed____ASSUME1 : bool;
  setSpeed____ASSUME__HIST : bool;
  controlSpeed__force : real;
  controlSpeed____ASSUME0 : bool;
  controlSpeed____ASSUME__HIST : bool;
  disabled : bool;
  no_button_pressed : bool;
  force : real;
  enabled : bool;
  speed : real;
  desired_speed : real;
  measureSpeed__rotate___EVENT_ : bool;
  measureSpeed__second___EVENT_ : bool;
  measureSpeed__time : real;
  setSpeed__on_off : bool;
  setSpeed__resume_speed : bool;
  setSpeed__set_speed : bool;
  setSpeed__inc : bool;
  setSpeed__dec : bool;
  setSpeed__brake_cancel : bool;
  setSpeed__speed : real;
  setSpeed__time : real;
  controlSpeed__speed : real;
  controlSpeed__desired_speed : real;
  controlSpeed__time : real;
  on_off : bool;
  resume_speed : bool;
  set_speed : bool;
  inc : bool;
  dec : bool;
  brake_cancel : bool;
  rotate___EVENT_ : bool;
  second___EVENT_ : bool;
  time : real
) returns (

);
var
  __ASSUME0 : bool;
  __ASSUME__HIST : bool;
  __GUARANTEE0 : bool;
  __GUARANTEE1 : bool;
  __GUARANTEE2 : bool;
  __GUARANTEE3 : bool;
  __GUARANTEE4 : bool;
  __GUARANTEE5 : bool;
  __GUARANTEE6 : bool;
  __GUARANTEE7 : bool;
let
  --%MAIN;
  __ASSUME0 = ((((((CruiseController__ToInt(on_off) + CruiseController__ToInt(resume_speed)) + CruiseController__ToInt(set_speed)) + CruiseController__ToInt(inc)) + CruiseController__ToInt(dec)) + CruiseController__ToInt(brake_cancel)) <= 1);

  __ASSUME__HIST = (controlSpeed____ASSUME__HIST and (setSpeed____ASSUME__HIST and (measureSpeed____ASSUME__HIST and true)));

  __GUARANTEE0 = (enabled => ((desired_speed >= 25.0) and (desired_speed <= 130.0)));

  __GUARANTEE1 = CruiseController__InitiallyHolds(disabled);

  __GUARANTEE2 = (disabled => CruiseController__UnchangedReal(desired_speed));

  __GUARANTEE3 = (true -> (((enabled and inc) and ((pre desired_speed) <= (130.0 - 1.0))) => (desired_speed = ((pre desired_speed) + 1.0))));

  __GUARANTEE4 = (true -> (((enabled and dec) and ((pre desired_speed) > (25.0 + 1.0))) => (desired_speed = ((pre desired_speed) - 1.0))));

  __GUARANTEE5 = ((enabled and no_button_pressed) => CruiseController__UnchangedReal(desired_speed));

  __GUARANTEE6 = ((enabled and (desired_speed <= speed)) => (force = 0.0));

  __GUARANTEE7 = ((enabled and (desired_speed > speed)) => (force > 0.0));

  assert __ASSUME0;

  assert (time = measureSpeed__time);

  assert _TOP__measureSpeed(measureSpeed____ASSUME__HIST, measureSpeed__rotate___EVENT_, measureSpeed__second___EVENT_, measureSpeed__time, measureSpeed__nc, measureSpeed__count, measureSpeed__speed);

  assert (measureSpeed____ASSUME__HIST = __HIST(true));

  assert (time = setSpeed__time);

  assert _TOP__setSpeed(setSpeed____ASSUME__HIST, setSpeed____ASSUME0, setSpeed____ASSUME1, setSpeed__on_off, setSpeed__resume_speed, setSpeed__set_speed, setSpeed__inc, setSpeed__dec, setSpeed__brake_cancel, setSpeed__speed, setSpeed__time, setSpeed__off_mode, setSpeed__set_condition, setSpeed__ready_mode, setSpeed__on_mode, setSpeed__paused_mode, setSpeed__setting_condition, setSpeed__increment_condition, setSpeed__decrement_condition, setSpeed__invariance_condition, setSpeed__desired_speed, setSpeed__enabled);

  assert (setSpeed____ASSUME__HIST = __HIST((setSpeed____ASSUME1 and setSpeed____ASSUME0)));

  assert (time = controlSpeed__time);

  assert _TOP__controlSpeed(controlSpeed____ASSUME__HIST, controlSpeed____ASSUME0, controlSpeed__speed, controlSpeed__desired_speed, controlSpeed__time, controlSpeed__force);

  assert (controlSpeed____ASSUME__HIST = __HIST(controlSpeed____ASSUME0));

  assert (on_off = setSpeed__on_off);

  assert (resume_speed = setSpeed__resume_speed);

  assert (set_speed = setSpeed__set_speed);

  assert (inc = setSpeed__inc);

  assert (dec = setSpeed__dec);

  assert (brake_cancel = setSpeed__brake_cancel);

  assert (rotate___EVENT_ = measureSpeed__rotate___EVENT_);

  assert (second___EVENT_ = measureSpeed__second___EVENT_);

  assert (measureSpeed__speed = setSpeed__speed);

  assert (measureSpeed__speed = controlSpeed__speed);

  assert (measureSpeed__speed = speed);

  assert (setSpeed__desired_speed = controlSpeed__desired_speed);

  assert (setSpeed__desired_speed = desired_speed);

  assert (setSpeed__enabled = enabled);

  assert (controlSpeed__force = force);

  assert (disabled = (not enabled));

  assert (no_button_pressed = ((((((not on_off) and (not resume_speed)) and (not set_speed)) and (not inc)) and (not dec)) and (not brake_cancel)));

  assert true;

  assert (((time = 0.0) -> (time > (pre time))) and (true -> (time = ((pre time) + (time - (pre time))))));

  --%PROPERTY __GUARANTEE4;

  --%IVC __ASSUME0;

tel;

node CruiseController__InitiallyHolds(
  X : bool
) returns (
  Y : bool
);
let
  Y = (X -> true);

tel;

node _CLOCKED_CruiseController__InitiallyHolds(
  _CLK : bool;
  _INIT : bool;
  X : bool
) returns (
  Y : bool
);
let
  Y = (if _CLK then (if _INIT then X else true) else (pre Y));

tel;

node CruiseController__ToInt(
  b : bool
) returns (
  i : int
);
let
  i = (if b then 1 else 0);

tel;

node _CLOCKED_CruiseController__ToInt(
  _CLK : bool;
  _INIT : bool;
  b : bool
) returns (
  i : int
);
let
  i = (if _CLK then (if b then 1 else 0) else (pre i));

tel;

node CruiseController__Max(
  a : real;
  b : real
) returns (
  z : real
);
let
  z = (if (a >= b) then a else b);

tel;

node _CLOCKED_CruiseController__Max(
  _CLK : bool;
  _INIT : bool;
  a : real;
  b : real
) returns (
  z : real
);
let
  z = (if _CLK then (if (a >= b) then a else b) else (pre z));

tel;

node CruiseController__UnchangedReal(
  n : real
) returns (
  b : bool
);
let
  b = (true -> (n = (pre n)));

tel;

node _CLOCKED_CruiseController__UnchangedReal(
  _CLK : bool;
  _INIT : bool;
  n : real
) returns (
  b : bool
);
var
  _STATE0 : real;
let
  b = (if _CLK then (if _INIT then true else (n = _STATE0)) else (pre b));

  _STATE0 = (if _CLK then (pre n) else (pre _STATE0));

tel;

node __HIST(
  input : bool
) returns (
  hist : bool
);
let
  hist = (input -> ((pre hist) and input));

tel;

node __MinPos(
  a : real;
  b : real
) returns (
  ret : real
);
let
  ret = (if (a <= 0.0) then b else (if (b <= 0.0) then a else (if (a <= b) then a else b)));

tel;

node __Rise(
  input : bool
) returns (
  output : bool
);
let
  output = (input -> ((pre (not input)) and input));

tel;

node __Fall(
  input : bool
) returns (
  output : bool
);
let
  output = ((not input) -> ((pre input) and (not input)));

tel;

