type SW2__MissionWindow__Impl = struct {crc : bool; wp1 : SW2__Coordinate__Impl; wp2 : SW2__Coordinate__Impl; wp3 : SW2__Coordinate__Impl; wp4 : SW2__Coordinate__Impl};
type SW2__FlightPattern = enum {SW2__FlightPattern_ZigZag, SW2__FlightPattern_StraightLine, SW2__FlightPattern_Perimeter};
type SW2__Mission__Impl = struct {wp1 : SW2__Coordinate__Impl; wp2 : SW2__Coordinate__Impl; wp3 : SW2__Coordinate__Impl; wp4 : SW2__Coordinate__Impl; wp5 : SW2__Coordinate__Impl; wp6 : SW2__Coordinate__Impl; wp7 : SW2__Coordinate__Impl; wp8 : SW2__Coordinate__Impl; wp9 : SW2__Coordinate__Impl; wp10 : SW2__Coordinate__Impl};
type SW2__Coordinate__Impl = struct {alt : int; lat : int; long : int};
type SW2__Map__Impl = struct {wp1 : SW2__Coordinate__Impl; wp2 : SW2__Coordinate__Impl; wp3 : SW2__Coordinate__Impl; wp4 : SW2__Coordinate__Impl};
type SW2__Command__Impl = struct {HMAC : bool; Map : SW2__Map__Impl; Pattern : SW2__FlightPattern};
type Base_Types__Boolean = bool;
type Base_Types__Unsigned = int;
type Base_Types__Unsigned_64 = int;
type Base_Types__Unsigned_32 = int;
type Base_Types__Unsigned_16 = int;
type Base_Types__Unsigned_8 = int;
type Base_Types__Integer = int;
type Base_Types__Integer_64 = int;
type Base_Types__Integer_32 = int;
type Base_Types__Integer_16 = int;
type Base_Types__Integer_8 = int;
type Base_Types__Float = real;
type Base_Types__Float_32 = real;
type Base_Types__Float_64 = real;

node _TOP__RADIO(
  __ASSUME__HIST : bool;
  __ASSUME0 : bool;
  recv_map_in___EVENT_ : bool;
  recv_map_in : SW2__Command__Impl;
  send_status_in___EVENT_ : bool;
  send_status_in : SW2__Coordinate__Impl;
  time : real;
  send_status_out___EVENT_ : bool;
  send_status_out : SW2__Coordinate__Impl;
  recv_map_out___EVENT_ : bool;
  recv_map_out : SW2__Command__Impl
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
let
  __GUARANTEE0 = (recv_map_out.HMAC = true);

  __ASSERT = ((__ASSUME__HIST => __GUARANTEE0) and (__ASSUME0 = (recv_map_in.HMAC = true)));

  --%IVC __GUARANTEE0;

tel;

node _TOP__FLT(
  __ASSUME__HIST : bool;
  __ASSUME0 : bool;
  filter_in___EVENT_ : bool;
  filter_in : SW2__Command__Impl;
  time : real;
  filter_out___EVENT_ : bool;
  filter_out : SW2__Command__Impl
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
  __GUARANTEE1 : bool;
let
  __GUARANTEE0 = (filter_out.HMAC = true);

  __GUARANTEE1 = SW2__good_command(filter_out);

  __ASSERT = ((__ASSUME__HIST => (__GUARANTEE1 and __GUARANTEE0)) and (__ASSUME0 = (filter_in.HMAC = true)));

  --%IVC __GUARANTEE0, __GUARANTEE1;

tel;

node _TOP__FPLN(
  __ASSUME__HIST : bool;
  __ASSUME0 : bool;
  __ASSUME1 : bool;
  recv_map___EVENT_ : bool;
  recv_map : SW2__Command__Impl;
  position_status___EVENT_ : bool;
  position_status : SW2__Coordinate__Impl;
  time : real;
  flight_plan : SW2__Mission__Impl
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
let
  __GUARANTEE0 = SW2__good_mission(flight_plan);

  __ASSERT = ((__ASSUME__HIST => __GUARANTEE0) and ((__ASSUME1 = (recv_map.HMAC = true)) and (__ASSUME0 = SW2__good_command(recv_map))));

  --%IVC __GUARANTEE0;

tel;

node _TOP__WPM(
  __ASSUME__HIST : bool;
  __ASSUME0 : bool;
  flight_plan : SW2__Mission__Impl;
  position_status___EVENT_ : bool;
  position_status : SW2__Coordinate__Impl;
  time : real;
  waypoint___EVENT_ : bool;
  waypoint : SW2__MissionWindow__Impl
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
let
  __GUARANTEE0 = SW2__good_mission_window(waypoint);

  __ASSERT = ((__ASSUME__HIST => __GUARANTEE0) and (__ASSUME0 = SW2__good_mission(flight_plan)));

  --%IVC __GUARANTEE0;

tel;

node _TOP__UART(
  __ASSUME__HIST : bool;
  __ASSUME0 : bool;
  position_status_in___EVENT_ : bool;
  position_status_in : SW2__Coordinate__Impl;
  waypoint_in___EVENT_ : bool;
  waypoint_in : SW2__MissionWindow__Impl;
  time : real;
  waypoint_out___EVENT_ : bool;
  waypoint_out : SW2__MissionWindow__Impl;
  position_status_out___EVENT_ : bool;
  position_status_out : SW2__Coordinate__Impl
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
let
  __GUARANTEE0 = (waypoint_out.crc = true);

  __ASSERT = ((__ASSUME__HIST => __GUARANTEE0) and (__ASSUME0 = SW2__good_mission_window(waypoint_in)));

  --%IVC __GUARANTEE0;

tel;

node main(
  RADIO__send_status_out___EVENT_ : bool;
  RADIO__send_status_out : SW2__Coordinate__Impl;
  RADIO__recv_map_out___EVENT_ : bool;
  RADIO__recv_map_out : SW2__Command__Impl;
  RADIO____ASSUME0 : bool;
  RADIO____ASSUME__HIST : bool;
  FLT__filter_out___EVENT_ : bool;
  FLT__filter_out : SW2__Command__Impl;
  FLT____ASSUME0 : bool;
  FLT____ASSUME__HIST : bool;
  FPLN__flight_plan : SW2__Mission__Impl;
  FPLN____ASSUME0 : bool;
  FPLN____ASSUME1 : bool;
  FPLN____ASSUME__HIST : bool;
  WPM__waypoint___EVENT_ : bool;
  WPM__waypoint : SW2__MissionWindow__Impl;
  WPM____ASSUME0 : bool;
  WPM____ASSUME__HIST : bool;
  UART__waypoint_out___EVENT_ : bool;
  UART__waypoint_out : SW2__MissionWindow__Impl;
  UART__position_status_out___EVENT_ : bool;
  UART__position_status_out : SW2__Coordinate__Impl;
  UART____ASSUME0 : bool;
  UART____ASSUME__HIST : bool;
  send_status___EVENT_ : bool;
  send_status : SW2__Coordinate__Impl;
  waypoint___EVENT_ : bool;
  waypoint : SW2__MissionWindow__Impl;
  RADIO__recv_map_in___EVENT_ : bool;
  RADIO__recv_map_in : SW2__Command__Impl;
  RADIO__send_status_in___EVENT_ : bool;
  RADIO__send_status_in : SW2__Coordinate__Impl;
  RADIO__time : real;
  FLT__filter_in___EVENT_ : bool;
  FLT__filter_in : SW2__Command__Impl;
  FLT__time : real;
  FPLN__recv_map___EVENT_ : bool;
  FPLN__recv_map : SW2__Command__Impl;
  FPLN__position_status___EVENT_ : bool;
  FPLN__position_status : SW2__Coordinate__Impl;
  FPLN__time : real;
  WPM__flight_plan : SW2__Mission__Impl;
  WPM__position_status___EVENT_ : bool;
  WPM__position_status : SW2__Coordinate__Impl;
  WPM__time : real;
  UART__position_status_in___EVENT_ : bool;
  UART__position_status_in : SW2__Coordinate__Impl;
  UART__waypoint_in___EVENT_ : bool;
  UART__waypoint_in : SW2__MissionWindow__Impl;
  UART__time : real;
  recv_map___EVENT_ : bool;
  recv_map : SW2__Command__Impl;
  position_status___EVENT_ : bool;
  position_status : SW2__Coordinate__Impl;
  time : real
) returns (

);
var
  __ASSUME0 : bool;
  __ASSUME1 : bool;
  __ASSUME__HIST : bool;
  __GUARANTEE0 : bool;
let
  --%MAIN;
  __ASSUME0 = (recv_map.HMAC = true);

  __ASSUME1 = (recv_map.HMAC = true);

  __ASSUME__HIST = (UART____ASSUME__HIST and (WPM____ASSUME__HIST and (FPLN____ASSUME__HIST and (FLT____ASSUME__HIST and (RADIO____ASSUME__HIST and true)))));

  __GUARANTEE0 = (waypoint.crc = true);

  assert __ASSUME0;

  assert __ASSUME1;

  assert (time = RADIO__time);

  assert _TOP__RADIO(RADIO____ASSUME__HIST, RADIO____ASSUME0, RADIO__recv_map_in___EVENT_, RADIO__recv_map_in, RADIO__send_status_in___EVENT_, RADIO__send_status_in, RADIO__time, RADIO__send_status_out___EVENT_, RADIO__send_status_out, RADIO__recv_map_out___EVENT_, RADIO__recv_map_out);

  assert (RADIO____ASSUME__HIST = __HIST(RADIO____ASSUME0));

  assert (time = FLT__time);

  assert _TOP__FLT(FLT____ASSUME__HIST, FLT____ASSUME0, FLT__filter_in___EVENT_, FLT__filter_in, FLT__time, FLT__filter_out___EVENT_, FLT__filter_out);

  assert (FLT____ASSUME__HIST = __HIST(FLT____ASSUME0));

  assert (time = FPLN__time);

  assert _TOP__FPLN(FPLN____ASSUME__HIST, FPLN____ASSUME0, FPLN____ASSUME1, FPLN__recv_map___EVENT_, FPLN__recv_map, FPLN__position_status___EVENT_, FPLN__position_status, FPLN__time, FPLN__flight_plan);

  assert (FPLN____ASSUME__HIST = __HIST((FPLN____ASSUME1 and FPLN____ASSUME0)));

  assert (time = WPM__time);

  assert _TOP__WPM(WPM____ASSUME__HIST, WPM____ASSUME0, WPM__flight_plan, WPM__position_status___EVENT_, WPM__position_status, WPM__time, WPM__waypoint___EVENT_, WPM__waypoint);

  assert (WPM____ASSUME__HIST = __HIST(WPM____ASSUME0));

  assert (time = UART__time);

  assert _TOP__UART(UART____ASSUME__HIST, UART____ASSUME0, UART__position_status_in___EVENT_, UART__position_status_in, UART__waypoint_in___EVENT_, UART__waypoint_in, UART__time, UART__waypoint_out___EVENT_, UART__waypoint_out, UART__position_status_out___EVENT_, UART__position_status_out);

  assert (UART____ASSUME__HIST = __HIST(UART____ASSUME0));

  assert (recv_map = RADIO__recv_map_in);

  assert (recv_map___EVENT_ = RADIO__recv_map_in___EVENT_);

  assert (position_status = UART__position_status_in);

  assert (position_status___EVENT_ = UART__position_status_in___EVENT_);

  assert (RADIO__send_status_out = send_status);

  assert (RADIO__send_status_out___EVENT_ = send_status___EVENT_);

  assert (RADIO__recv_map_out = FLT__filter_in);

  assert (RADIO__recv_map_out___EVENT_ = FLT__filter_in___EVENT_);

  assert (FLT__filter_out = FPLN__recv_map);

  assert (FLT__filter_out___EVENT_ = FPLN__recv_map___EVENT_);

  assert (FPLN__flight_plan = WPM__flight_plan);

  assert (WPM__waypoint = UART__waypoint_in);

  assert (WPM__waypoint___EVENT_ = UART__waypoint_in___EVENT_);

  assert (UART__waypoint_out = waypoint);

  assert (UART__waypoint_out___EVENT_ = waypoint___EVENT_);

  assert (UART__position_status_out = WPM__position_status);

  assert (UART__position_status_out___EVENT_ = WPM__position_status___EVENT_);

  assert (UART__position_status_out = FPLN__position_status);

  assert (UART__position_status_out___EVENT_ = FPLN__position_status___EVENT_);

  assert (UART__position_status_out = RADIO__send_status_in);

  assert (UART__position_status_out___EVENT_ = RADIO__send_status_in___EVENT_);

  assert true;

  assert (((time = 0.0) -> (time > (pre time))) and (true -> (time = ((pre time) + (time - (pre time))))));

  -- %PROPERTY RADIO____ASSUME0;
  -- %PROPERTY FLT____ASSUME0;
  -- %PROPERTY FPLN____ASSUME0;
  -- %PROPERTY FPLN____ASSUME1;
  -- %PROPERTY WPM____ASSUME0;
  -- %PROPERTY UART____ASSUME0;
  -- %PROPERTY __ASSUME__HIST;
  --%PROPERTY __GUARANTEE0;

  --%IVC __ASSUME0, __ASSUME1;

tel;

node SW2__good_coordinate(
  coord : SW2__Coordinate__Impl
) returns (
  _outvar : bool
);
let
  _outvar = ((((((coord.lat >= (-90)) and (coord.lat <= 90)) and (coord.long >= (-180))) and (coord.long <= 180)) and (coord.alt >= 0)) and (coord.alt <= 15000));

tel;

node _CLOCKED_SW2__good_coordinate(
  _CLK : bool;
  _INIT : bool;
  coord : SW2__Coordinate__Impl
) returns (
  _outvar : bool
);
let
  _outvar = (if _CLK then ((((((coord.lat >= (-90)) and (coord.lat <= 90)) and (coord.long >= (-180))) and (coord.long <= 180)) and (coord.alt >= 0)) and (coord.alt <= 15000)) else (pre _outvar));

tel;

node SW2__good_map(
  map : SW2__Map__Impl
) returns (
  _outvar : bool
);
let
  _outvar = (((SW2__good_coordinate(map.wp1) and SW2__good_coordinate(map.wp2)) and SW2__good_coordinate(map.wp3)) and SW2__good_coordinate(map.wp4));

tel;

node _CLOCKED_SW2__good_map(
  _CLK : bool;
  _INIT : bool;
  map : SW2__Map__Impl
) returns (
  _outvar : bool
);
let
  _outvar = (if _CLK then (((_CLOCKED_SW2__good_coordinate(_CLK, _INIT, map.wp1) and _CLOCKED_SW2__good_coordinate(_CLK, _INIT, map.wp2)) and _CLOCKED_SW2__good_coordinate(_CLK, _INIT, map.wp3)) and _CLOCKED_SW2__good_coordinate(_CLK, _INIT, map.wp4)) else (pre _outvar));

tel;

node SW2__good_pattern(
  pattern : SW2__FlightPattern
) returns (
  _outvar : bool
);
let
  _outvar = (((pattern = SW2__FlightPattern_ZigZag) or (pattern = SW2__FlightPattern_StraightLine)) or (pattern = SW2__FlightPattern_Perimeter));

tel;

node _CLOCKED_SW2__good_pattern(
  _CLK : bool;
  _INIT : bool;
  pattern : SW2__FlightPattern
) returns (
  _outvar : bool
);
let
  _outvar = (if _CLK then (((pattern = SW2__FlightPattern_ZigZag) or (pattern = SW2__FlightPattern_StraightLine)) or (pattern = SW2__FlightPattern_Perimeter)) else (pre _outvar));

tel;

node SW2__good_HMAC(
  hmac : bool
) returns (
  _outvar : bool
);
let
  _outvar = ((hmac = true) or (hmac = false));

tel;

node _CLOCKED_SW2__good_HMAC(
  _CLK : bool;
  _INIT : bool;
  hmac : bool
) returns (
  _outvar : bool
);
let
  _outvar = (if _CLK then ((hmac = true) or (hmac = false)) else (pre _outvar));

tel;

node SW2__good_command(
  cmd : SW2__Command__Impl
) returns (
  _outvar : bool
);
let
  _outvar = ((SW2__good_map(cmd.Map) and SW2__good_pattern(cmd.Pattern)) and SW2__good_HMAC(cmd.HMAC));

tel;

node _CLOCKED_SW2__good_command(
  _CLK : bool;
  _INIT : bool;
  cmd : SW2__Command__Impl
) returns (
  _outvar : bool
);
let
  _outvar = (if _CLK then ((_CLOCKED_SW2__good_map(_CLK, _INIT, cmd.Map) and _CLOCKED_SW2__good_pattern(_CLK, _INIT, cmd.Pattern)) and _CLOCKED_SW2__good_HMAC(_CLK, _INIT, cmd.HMAC)) else (pre _outvar));

tel;

node SW2__good_mission(
  mission : SW2__Mission__Impl
) returns (
  _outvar : bool
);
let
  _outvar = (((((((((SW2__good_coordinate(mission.wp1) and SW2__good_coordinate(mission.wp2)) and SW2__good_coordinate(mission.wp3)) and SW2__good_coordinate(mission.wp4)) and SW2__good_coordinate(mission.wp5)) and SW2__good_coordinate(mission.wp6)) and SW2__good_coordinate(mission.wp7)) and SW2__good_coordinate(mission.wp8)) and SW2__good_coordinate(mission.wp9)) and SW2__good_coordinate(mission.wp10));

tel;

node _CLOCKED_SW2__good_mission(
  _CLK : bool;
  _INIT : bool;
  mission : SW2__Mission__Impl
) returns (
  _outvar : bool
);
let
  _outvar = (if _CLK then (((((((((_CLOCKED_SW2__good_coordinate(_CLK, _INIT, mission.wp1) and _CLOCKED_SW2__good_coordinate(_CLK, _INIT, mission.wp2)) and _CLOCKED_SW2__good_coordinate(_CLK, _INIT, mission.wp3)) and _CLOCKED_SW2__good_coordinate(_CLK, _INIT, mission.wp4)) and _CLOCKED_SW2__good_coordinate(_CLK, _INIT, mission.wp5)) and _CLOCKED_SW2__good_coordinate(_CLK, _INIT, mission.wp6)) and _CLOCKED_SW2__good_coordinate(_CLK, _INIT, mission.wp7)) and _CLOCKED_SW2__good_coordinate(_CLK, _INIT, mission.wp8)) and _CLOCKED_SW2__good_coordinate(_CLK, _INIT, mission.wp9)) and _CLOCKED_SW2__good_coordinate(_CLK, _INIT, mission.wp10)) else (pre _outvar));

tel;

node SW2__good_mission_window(
  win : SW2__MissionWindow__Impl
) returns (
  _outvar : bool
);
let
  _outvar = (((SW2__good_coordinate(win.wp1) and SW2__good_coordinate(win.wp2)) and SW2__good_coordinate(win.wp3)) and SW2__good_coordinate(win.wp4));

tel;

node _CLOCKED_SW2__good_mission_window(
  _CLK : bool;
  _INIT : bool;
  win : SW2__MissionWindow__Impl
) returns (
  _outvar : bool
);
let
  _outvar = (if _CLK then (((_CLOCKED_SW2__good_coordinate(_CLK, _INIT, win.wp1) and _CLOCKED_SW2__good_coordinate(_CLK, _INIT, win.wp2)) and _CLOCKED_SW2__good_coordinate(_CLK, _INIT, win.wp3)) and _CLOCKED_SW2__good_coordinate(_CLK, _INIT, win.wp4)) else (pre _outvar));

tel;

node __HIST(
  input : bool
) returns (
  hist : bool
);
let
  hist = (input -> ((pre hist) and input));

tel;

node __MinPos(
  a : real;
  b : real
) returns (
  ret : real
);
let
  ret = (if (a <= 0.0) then b else (if (b <= 0.0) then a else (if (a <= b) then a else b)));

tel;

node __Rise(
  input : bool
) returns (
  output : bool
);
let
  output = (input -> ((pre (not input)) and input));

tel;

node __Fall(
  input : bool
) returns (
  output : bool
);
let
  output = ((not input) -> ((pre input) and (not input)));

tel;

