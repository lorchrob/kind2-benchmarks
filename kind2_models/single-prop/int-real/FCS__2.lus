type FGS__Lateral_Modes__Lateral_Modes_Impl = struct {HDG_active : bool; ROLL_active : bool};
type FGS__Guidance_Data__Guidance_Data_Impl = struct {cmds : FGS__Guidance_Commands__Guidance_Commands_Impl; mds : FGS__Flight_Modes__Flight_Modes_Impl};
type FGS__Flight_Modes__Flight_Modes_Impl = struct {active : bool; lat : FGS__Lateral_Modes__Lateral_Modes_Impl; ver : int};
type ADS__Airspeed__Airspeed_Impl = struct {Val : real; Valid : bool};
type LDS__Leader_Selection_Data__Leader_Selection_Data_Impl = struct {Leader : int; Valid : bool};
type ADS__Pitch__Pitch_Impl = struct {Val : real; Valid : bool};
type FGS__Guidance_Commands__Guidance_Commands_Impl = struct {Pitch_Delta : real; Pitch_Valid : bool};
type APS__Control_Surface_Actuator_Data__Control_Surface_Actuator_Data_Impl = struct {CSA_Pitch_Delta : real; CSA_Pitch_Valid : bool};
type ADS__Air_Data__Air_Data_Impl = struct {AirSpeed : ADS__Airspeed__Airspeed_Impl; Pitch : ADS__Pitch__Pitch_Impl};
type Base_Types__Boolean = bool;
type Base_Types__Unsigned = int;
type Base_Types__Unsigned_64 = int;
type Base_Types__Unsigned_32 = int;
type Base_Types__Unsigned_16 = int;
type Base_Types__Unsigned_8 = int;
type Base_Types__Integer = int;
type Base_Types__Integer_64 = int;
type Base_Types__Integer_32 = int;
type Base_Types__Integer_16 = int;
type Base_Types__Integer_8 = int;
type Base_Types__Float = real;
type Base_Types__Float_32 = real;
type Base_Types__Float_64 = real;

node _TOP__AP(
  __ASSUME__HIST : bool;
  GC_L : FGS__Guidance_Data__Guidance_Data_Impl;
  GC_R : FGS__Guidance_Data__Guidance_Data_Impl;
  time : real;
  leader_pitch_delta : real;
  leader_pitch_delta_correct : bool;
  CSA : APS__Control_Surface_Actuator_Data__Control_Surface_Actuator_Data_Impl
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
let
  __GUARANTEE0 = leader_pitch_delta_correct;

  __ASSERT = ((leader_pitch_delta_correct = (((leader_pitch_delta > 0.0) => ((CSA.CSA_Pitch_Delta > 0.0) and (CSA.CSA_Pitch_Delta <= leader_pitch_delta))) and ((leader_pitch_delta <= 0.0) => ((CSA.CSA_Pitch_Delta <= 0.0) and (CSA.CSA_Pitch_Delta >= leader_pitch_delta))))) and ((leader_pitch_delta = (if GC_L.mds.active then GC_L.cmds.Pitch_Delta else (if GC_R.mds.active then GC_R.cmds.Pitch_Delta else (0.0 -> (pre leader_pitch_delta))))) and (__ASSUME__HIST => __GUARANTEE0)));

  --%IVC __GUARANTEE0;

tel;

node _TOP__FGS_L(
  __ASSUME__HIST : bool;
  AD : ADS__Air_Data__Air_Data_Impl;
  LSI : LDS__Leader_Selection_Data__Leader_Selection_Data_Impl;
  time : real;
  this_side_in_control : bool;
  active_implies_valid : bool;
  leader_implies_active : bool;
  gc_ok : bool;
  GC : FGS__Guidance_Data__Guidance_Data_Impl;
  LSO : LDS__Leader_Selection_Data__Leader_Selection_Data_Impl
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
  __GUARANTEE1 : bool;
  __GUARANTEE2 : bool;
  __GUARANTEE3 : bool;
  __GUARANTEE4 : bool;
let
  __GUARANTEE0 = active_implies_valid;

  __GUARANTEE1 = leader_implies_active;

  __GUARANTEE2 = (LSO.Valid = AD.Pitch.Valid);

  __GUARANTEE3 = (this_side_in_control => gc_ok);

  __GUARANTEE4 = (this_side_in_control => (AD.Pitch.Val = GC.cmds.Pitch_Delta));

  __ASSERT = ((gc_ok = ((true -> (FGS__Flight_Guidance_System__abs((GC.cmds.Pitch_Delta - (0.0 -> (pre GC.cmds.Pitch_Delta)))) < 1.0)) and (FGS__Flight_Guidance_System__abs(GC.cmds.Pitch_Delta) < 5.0))) and ((leader_implies_active = ((LSO.Leader = 1) => GC.mds.active)) and ((active_implies_valid = (this_side_in_control => LSO.Valid)) and ((this_side_in_control = GC.mds.active) and (__ASSUME__HIST => (__GUARANTEE4 and (__GUARANTEE3 and (__GUARANTEE2 and (__GUARANTEE1 and __GUARANTEE0)))))))));

  --%IVC __GUARANTEE0, __GUARANTEE1, __GUARANTEE2, __GUARANTEE3, __GUARANTEE4;

tel;

node _TOP__FGS_R(
  __ASSUME__HIST : bool;
  AD : ADS__Air_Data__Air_Data_Impl;
  LSI : LDS__Leader_Selection_Data__Leader_Selection_Data_Impl;
  time : real;
  this_side_in_control : bool;
  active_implies_valid : bool;
  leader_implies_active : bool;
  gc_ok : bool;
  GC : FGS__Guidance_Data__Guidance_Data_Impl;
  LSO : LDS__Leader_Selection_Data__Leader_Selection_Data_Impl
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
  __GUARANTEE1 : bool;
  __GUARANTEE2 : bool;
  __GUARANTEE3 : bool;
  __GUARANTEE4 : bool;
let
  __GUARANTEE0 = active_implies_valid;

  __GUARANTEE1 = leader_implies_active;

  __GUARANTEE2 = (LSO.Valid = AD.Pitch.Valid);

  __GUARANTEE3 = (this_side_in_control => gc_ok);

  __GUARANTEE4 = (this_side_in_control => (AD.Pitch.Val = GC.cmds.Pitch_Delta));

  __ASSERT = ((gc_ok = ((true -> (FGS__Flight_Guidance_System__abs((GC.cmds.Pitch_Delta - (0.0 -> (pre GC.cmds.Pitch_Delta)))) < 1.0)) and (FGS__Flight_Guidance_System__abs(GC.cmds.Pitch_Delta) < 5.0))) and ((leader_implies_active = ((LSO.Leader = 2) => GC.mds.active)) and ((active_implies_valid = (this_side_in_control => LSO.Valid)) and ((this_side_in_control = GC.mds.active) and (__ASSUME__HIST => (__GUARANTEE4 and (__GUARANTEE3 and (__GUARANTEE2 and (__GUARANTEE1 and __GUARANTEE0)))))))));

  --%IVC __GUARANTEE0, __GUARANTEE1, __GUARANTEE2, __GUARANTEE3, __GUARANTEE4;

tel;

node main(
  AP__leader_pitch_delta : real;
  AP__leader_pitch_delta_correct : bool;
  AP__CSA : APS__Control_Surface_Actuator_Data__Control_Surface_Actuator_Data_Impl;
  AP____ASSUME__HIST : bool;
  FGS_L__this_side_in_control : bool;
  FGS_L__active_implies_valid : bool;
  FGS_L__leader_implies_active : bool;
  FGS_L__gc_ok : bool;
  FGS_L__GC : FGS__Guidance_Data__Guidance_Data_Impl;
  FGS_L__LSO : LDS__Leader_Selection_Data__Leader_Selection_Data_Impl;
  FGS_L____ASSUME__HIST : bool;
  FGS_R__this_side_in_control : bool;
  FGS_R__active_implies_valid : bool;
  FGS_R__leader_implies_active : bool;
  FGS_R__gc_ok : bool;
  FGS_R__GC : FGS__Guidance_Data__Guidance_Data_Impl;
  FGS_R__LSO : LDS__Leader_Selection_Data__Leader_Selection_Data_Impl;
  FGS_R____ASSUME__HIST : bool;
  prop2 : bool;
  prop1 : bool;
  AD_L_Pitch_Step_Delta_Valid : bool;
  AD_R_Pitch_Step_Delta_Valid : bool;
  pitch_lr_ok : bool;
  left_side_valid : bool;
  right_side_valid : bool;
  some_side_valid : bool;
  FD_L : FGS__Guidance_Data__Guidance_Data_Impl;
  FD_R : FGS__Guidance_Data__Guidance_Data_Impl;
  CSA : APS__Control_Surface_Actuator_Data__Control_Surface_Actuator_Data_Impl;
  AP__GC_L : FGS__Guidance_Data__Guidance_Data_Impl;
  AP__GC_R : FGS__Guidance_Data__Guidance_Data_Impl;
  AP__time : real;
  FGS_L__AD : ADS__Air_Data__Air_Data_Impl;
  FGS_L__LSI : LDS__Leader_Selection_Data__Leader_Selection_Data_Impl;
  FGS_L__time : real;
  FGS_R__AD : ADS__Air_Data__Air_Data_Impl;
  FGS_R__LSI : LDS__Leader_Selection_Data__Leader_Selection_Data_Impl;
  FGS_R__time : real;
  AD_L : ADS__Air_Data__Air_Data_Impl;
  AD_R : ADS__Air_Data__Air_Data_Impl;
  time : real
) returns (

);
var
  __ASSUME0 : bool;
  __ASSUME1 : bool;
  __ASSUME2 : bool;
  __ASSUME__HIST : bool;
  __GUARANTEE0 : bool;
  __GUARANTEE1 : bool;
let
  --%MAIN;
  __ASSUME0 = some_side_valid;

  __ASSUME1 = (((false -> (pre (false -> (pre (not left_side_valid))))) and (false -> (pre left_side_valid))) => left_side_valid);

  __ASSUME2 = ((AD_L_Pitch_Step_Delta_Valid and AD_R_Pitch_Step_Delta_Valid) and pitch_lr_ok);

  __ASSUME__HIST = (FGS_R____ASSUME__HIST and (FGS_L____ASSUME__HIST and (AP____ASSUME__HIST and true)));

  __GUARANTEE0 = (true -> (FCS__Flight_Control_System__abs(CSA.CSA_Pitch_Delta) < 5.0));

  __GUARANTEE1 = (true -> (FCS__Flight_Control_System__abs((CSA.CSA_Pitch_Delta - (0.0 -> (pre CSA.CSA_Pitch_Delta)))) < 5.0));

  assert __ASSUME0;

  assert __ASSUME1;

  assert __ASSUME2;

  assert (time = AP__time);

  assert _TOP__AP(AP____ASSUME__HIST, AP__GC_L, AP__GC_R, AP__time, AP__leader_pitch_delta, AP__leader_pitch_delta_correct, AP__CSA);

  assert (AP____ASSUME__HIST = __HIST(true));

  assert (time = FGS_L__time);

  assert _TOP__FGS_L(FGS_L____ASSUME__HIST, FGS_L__AD, FGS_L__LSI, FGS_L__time, FGS_L__this_side_in_control, FGS_L__active_implies_valid, FGS_L__leader_implies_active, FGS_L__gc_ok, FGS_L__GC, FGS_L__LSO);

  assert (FGS_L____ASSUME__HIST = __HIST(true));

  assert (time = FGS_R__time);

  assert _TOP__FGS_R(FGS_R____ASSUME__HIST, FGS_R__AD, FGS_R__LSI, FGS_R__time, FGS_R__this_side_in_control, FGS_R__active_implies_valid, FGS_R__leader_implies_active, FGS_R__gc_ok, FGS_R__GC, FGS_R__LSO);

  assert (FGS_R____ASSUME__HIST = __HIST(true));

  assert (AD_L = FGS_L__AD);

  assert (AD_R = FGS_R__AD);

  assert (AP__CSA = CSA);

  assert (FGS_L__LSO = FGS_R__LSI);

  assert (FGS_L__GC = AP__GC_L);

  assert (FGS_L__GC = FD_L);

  assert (FGS_R__LSO = FGS_L__LSI);

  assert (FGS_R__GC = AP__GC_R);

  assert (FGS_R__GC = FD_R);

  assert ((FGS_L__LSO.Valid and FGS_R__LSO.Valid) => (FGS_L__LSO.Leader = FGS_R__LSO.Leader));

  assert ((false -> (pre (not FGS_L__LSO.Valid))) => (FGS_R__LSO.Valid => (FGS_R__LSO.Leader <> 1)));

  assert ((false -> (pre (not FGS_R__LSO.Valid))) => (FGS_L__LSO.Valid => (FGS_L__LSO.Leader <> 2)));

  assert ((false -> (pre (FGS_L__LSO.Valid or FGS_R__LSO.Valid))) => ((FGS_L__LSO.Valid => ((FGS_L__LSO.Leader >= 1) and (FGS_L__LSO.Leader <= 2))) and (FGS_R__LSO.Valid => ((FGS_R__LSO.Leader >= 1) and (FGS_R__LSO.Leader <= 2)))));

  assert (prop1 and prop2);

  assert (prop2 = ((false -> (pre (FGS_L__LSO.Valid and (FGS_L__LSO.Leader = 1)))) => (FGS_L__LSO.Valid => (FGS_L__LSO.Leader = 1))));

  assert (prop1 = ((false -> (pre (FGS_R__LSO.Valid and (FGS_R__LSO.Leader = 2)))) => (FGS_R__LSO.Valid => (FGS_R__LSO.Leader = 2))));

  assert (AD_L_Pitch_Step_Delta_Valid = (true -> (FCS__Flight_Control_System__abs((AD_L.Pitch.Val - (0.0 -> (pre AD_L.Pitch.Val)))) < 1.0)));

  assert (AD_R_Pitch_Step_Delta_Valid = (true -> (FCS__Flight_Control_System__abs((AD_R.Pitch.Val - (0.0 -> (pre AD_R.Pitch.Val)))) < 1.0)));

  assert (pitch_lr_ok = (FCS__Flight_Control_System__abs((AD_L.Pitch.Val - AD_R.Pitch.Val)) < 2.0));

  assert (left_side_valid = AD_L.Pitch.Valid);

  assert (right_side_valid = AD_R.Pitch.Valid);

  assert (some_side_valid = (left_side_valid or right_side_valid));

  assert true;

  assert (((time = 0.0) -> (time > (pre time))) and (true -> (time = ((pre time) + (time - (pre time))))));

  -- %PROPERTY __ASSUME__HIST;
  --%PROPERTY __GUARANTEE0;
  -- %PROPERTY __GUARANTEE1;

  --%IVC __ASSUME0, __ASSUME1, __ASSUME2;

tel;

node FGS__Flight_Guidance_System__abs(
  x : real
) returns (
  _outvar : real
);
let
  _outvar = (if (x > 0.0) then x else (-x));

tel;

node _CLOCKED_FGS__Flight_Guidance_System__abs(
  _CLK : bool;
  _INIT : bool;
  x : real
) returns (
  _outvar : real
);
let
  _outvar = (if _CLK then (if (x > 0.0) then x else (-x)) else (pre _outvar));

tel;

node FCS__Flight_Control_System__abs(
  x : real
) returns (
  _outvar : real
);
let
  _outvar = (if (x > 0.0) then x else (-x));

tel;

node _CLOCKED_FCS__Flight_Control_System__abs(
  _CLK : bool;
  _INIT : bool;
  x : real
) returns (
  _outvar : real
);
let
  _outvar = (if _CLK then (if (x > 0.0) then x else (-x)) else (pre _outvar));

tel;

node __HIST(
  input : bool
) returns (
  hist : bool
);
let
  hist = (input -> ((pre hist) and input));

tel;

node __MinPos(
  a : real;
  b : real
) returns (
  ret : real
);
let
  ret = (if (a <= 0.0) then b else (if (b <= 0.0) then a else (if (a <= b) then a else b)));

tel;

node __Rise(
  input : bool
) returns (
  output : bool
);
let
  output = (input -> ((pre (not input)) and input));

tel;

node __Fall(
  input : bool
) returns (
  output : bool
);
let
  output = ((not input) -> ((pre input) and (not input)));

tel;

