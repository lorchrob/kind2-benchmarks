type Data_Types__DeliveryOrder__impl = struct {item_value : real; target_picture : int; target_position : Data_Types__Position__impl};
type Data_Types__RadioResponse__impl = struct {data_available : bool; target_confirmed : bool};
type Data_Types__DeliveryStatus = enum {Data_Types__DeliveryStatus_NOT_STARTED, Data_Types__DeliveryStatus_IN_PROGRESS, Data_Types__DeliveryStatus_COMPLETED, Data_Types__DeliveryStatus_FAILED};
type Data_Types__PackageDeliveryCommand = enum {Data_Types__PackageDeliveryCommand_NO_OPERATION, Data_Types__PackageDeliveryCommand_RELEASE_PACKAGE, Data_Types__PackageDeliveryCommand_ABORT_DELIVERY};
type Data_Types__ProbeSafeLanding__impl = struct {has_valid_marker : bool; is_target_clear : bool};
type Data_Types__Position__impl = struct {x : real; y : real};
type Data_Types__Constellation = enum {Data_Types__Constellation_Satellite0, Data_Types__Constellation_Satellite1};
type Data_Types__InputBus__impl = struct {abort_cmd : bool; connected : bool; constellation : Data_Types__Constellation; init_criteria_satisfied : bool; launch_pos : Data_Types__Position__impl; mission_store_release_sequence : bool; on_off : bool; order : Data_Types__DeliveryOrder__impl; update_order : bool};
type Base_Types__Boolean = bool;
type Base_Types__Unsigned = int;
type Base_Types__Unsigned_64 = int;
type Base_Types__Unsigned_32 = int;
type Base_Types__Unsigned_16 = int;
type Base_Types__Unsigned_8 = int;
type Base_Types__Integer = int;
type Base_Types__Integer_64 = int;
type Base_Types__Integer_32 = int;
type Base_Types__Integer_16 = int;
type Base_Types__Integer_8 = int;
type Base_Types__Float = real;
type Base_Types__Float_32 = real;
type Base_Types__Float_64 = real;

node _TOP__radio(
  __ASSUME__HIST : bool;
  comm_in : Data_Types__RadioResponse__impl;
  radio_in : bool;
  time : real;
  comm_out : bool;
  radio_out : Data_Types__RadioResponse__impl;
  health_status : bool
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
  __GUARANTEE1 : bool;
let
  __GUARANTEE0 = (radio_in => ((radio_out.data_available = comm_in.data_available) and (comm_in.target_confirmed = radio_out.target_confirmed)));

  __GUARANTEE1 = ((not radio_in) => (not radio_out.data_available));

  __ASSERT = (__ASSUME__HIST => (__GUARANTEE1 and __GUARANTEE0));

  --%IVC __GUARANTEE0, __GUARANTEE1;

tel;

node _TOP__deliveryPlanner(
  __ASSUME__HIST : bool;
  bus_in : Data_Types__InputBus__impl;
  cur_pos : Data_Types__Position__impl;
  delivery_status : Data_Types__DeliveryStatus;
  radio_response : Data_Types__RadioResponse__impl;
  camera_result : int;
  gps_health_status : bool;
  imu_health_status : bool;
  rdo_health_status : bool;
  cam_health_status : bool;
  package_is_secure : bool;
  time : real;
  recent_order : Data_Types__DeliveryOrder__impl;
  truck_position : Data_Types__Position__impl;
  dest_position : Data_Types__Position__impl;
  expensive_item : bool;
  confirmation : bool;
  confirmation_timeout : bool;
  get_clearance_timeout : bool;
  delivery_failed : bool;
  delivery_completed : bool;
  is_safe_landing : bool;
  on_off : bool;
  init_criteria_succeed : bool;
  init_criteria_failed : bool;
  abort_cmd : bool;
  mission_store_release_sequence : bool;
  okay_to_launch : bool;
  separation : bool;
  destination_location_reached : bool;
  no_clearance : bool;
  successfull_delivery : bool;
  exhaustive_retries : bool;
  internal_error_detected : bool;
  truck_location_reached : bool;
  connected : bool;
  off_mode : bool;
  abort_mode : bool;
  init_mode : bool;
  ready_mode : bool;
  launch_mode : bool;
  flying_to_dest_mode : bool;
  making_delivery_mode : bool;
  return_to_truck_mode : bool;
  radio_cmd : bool;
  delivery_cmd : Data_Types__PackageDeliveryCommand;
  dest_location : Data_Types__Position__impl;
  bus_out : bool;
  nav_cmd : bool;
  camera : bool;
  probe_safe_landing : Data_Types__ProbeSafeLanding__impl;
  constellation : Data_Types__Constellation;
  launch_pos : Data_Types__Position__impl;
  probe_init_mode : bool;
  probe_abort_mode : bool;
  target_clear : bool;
  valid_marker : bool
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
  __GUARANTEE1 : bool;
  __GUARANTEE2 : bool;
  __GUARANTEE3 : bool;
  __GUARANTEE4 : bool;
  __GUARANTEE5 : bool;
  __GUARANTEE6 : bool;
  __GUARANTEE7 : bool;
  __GUARANTEE8 : bool;
let
  __GUARANTEE0 = (probe_safe_landing = Data_Types__ProbeSafeLanding__impl {has_valid_marker = valid_marker; is_target_clear = target_clear});

  __GUARANTEE1 = (delivery_cmd = (if ((making_delivery_mode and (not no_clearance)) and (expensive_item => confirmation)) then Data_Types__PackageDeliveryCommand_RELEASE_PACKAGE else (if (return_to_truck_mode and internal_error_detected) then Data_Types__PackageDeliveryCommand_ABORT_DELIVERY else Data_Types__PackageDeliveryCommand_NO_OPERATION)));

  __GUARANTEE2 = (constellation = (if init_mode then bus_in.constellation else (bus_in.constellation -> (pre constellation))));

  __GUARANTEE3 = (dest_location = (if init_mode then bus_in.order.target_position else (bus_in.order.target_position -> (pre dest_location))));

  __GUARANTEE4 = (launch_pos = (if init_mode then bus_in.launch_pos else (bus_in.launch_pos -> (pre launch_pos))));

  __GUARANTEE5 = (radio_cmd = (making_delivery_mode and expensive_item));

  __GUARANTEE6 = (probe_init_mode = init_mode);

  __GUARANTEE7 = (probe_abort_mode = abort_mode);

  __GUARANTEE8 = (nav_cmd = ((flying_to_dest_mode or making_delivery_mode) or return_to_truck_mode));

  __ASSERT = ((return_to_truck_mode = (false -> (((pre making_delivery_mode) and (((successfull_delivery or exhaustive_retries) or delivery_failed) or internal_error_detected)) or ((pre return_to_truck_mode) and (not (truck_location_reached and connected)))))) and ((making_delivery_mode = (false -> (((pre flying_to_dest_mode) and destination_location_reached) or ((pre making_delivery_mode) and (not return_to_truck_mode))))) and ((flying_to_dest_mode = (false -> ((((pre launch_mode) and (not abort_mode)) and ((package_is_secure and okay_to_launch) and separation)) or ((pre flying_to_dest_mode) and (not destination_location_reached))))) and ((launch_mode = (false -> ((((((pre ready_mode) and (not off_mode)) and (not abort_mode)) and (not init_mode)) and (mission_store_release_sequence and connected)) or (((pre launch_mode) and (not abort_mode)) and (not flying_to_dest_mode))))) and ((ready_mode = (false -> (((((pre init_mode) and (not off_mode)) and (not abort_mode)) and (init_criteria_succeed and connected)) or (((((pre ready_mode) and (not off_mode)) and (not abort_mode)) and (not init_mode)) and (not launch_mode))))) and ((init_mode = (false -> (((((pre off_mode) and (on_off and connected)) or ((((pre init_mode) and (not off_mode)) and (not abort_mode)) and (not (init_criteria_succeed and connected)))) or ((((pre ready_mode) and (not off_mode)) and (not abort_mode)) and (init_criteria_failed and connected))) or ((pre return_to_truck_mode) and (truck_location_reached and connected))))) and ((abort_mode = (false -> (((((((pre init_mode) or (pre ready_mode)) and (not off_mode)) and abort_cmd) and connected) or (((pre launch_mode) and abort_cmd) and connected)) or ((pre abort_mode) and (not (on_off and connected)))))) and ((off_mode = (true -> (((pre off_mode) and (not (on_off and connected))) or (((((pre init_mode) or (pre ready_mode)) or (pre abort_mode)) and on_off) and connected)))) and ((connected = bus_in.connected) and ((truck_location_reached = Agree_Nodes__close_locations(cur_pos, truck_position)) and ((internal_error_detected = ((((not gps_health_status) or (not imu_health_status)) or (not rdo_health_status)) or (not cam_health_status))) and ((exhaustive_retries = (get_clearance_timeout or confirmation_timeout)) and ((successfull_delivery = ((delivery_completed and destination_location_reached) and (not no_clearance))) and ((no_clearance = (not is_safe_landing)) and ((destination_location_reached = Agree_Nodes__close_locations(cur_pos, dest_position)) and ((separation = (not connected)) and ((okay_to_launch = (not internal_error_detected)) and ((mission_store_release_sequence = bus_in.mission_store_release_sequence) and ((abort_cmd = bus_in.abort_cmd) and ((init_criteria_failed = (not init_criteria_succeed)) and ((init_criteria_succeed = (bus_in.init_criteria_satisfied and (not internal_error_detected))) and ((on_off = bus_in.on_off) and ((is_safe_landing = (target_clear and valid_marker)) and ((delivery_completed = (delivery_status = Data_Types__DeliveryStatus_COMPLETED)) and ((delivery_failed = (delivery_status = Data_Types__DeliveryStatus_FAILED)) and ((get_clearance_timeout = (Agree_Nodes__Duration(no_clearance) >= 3)) and ((confirmation_timeout = (Agree_Nodes__Duration((not confirmation)) > 10)) and ((confirmation = (radio_response.target_confirmed and radio_response.data_available)) and ((expensive_item = (recent_order.item_value >= 100.0)) and ((dest_position = dest_location) and ((truck_position = Agree_Nodes__FirstLocation(cur_pos)) and ((recent_order = (if init_mode then bus_in.order else (bus_in.order -> (pre recent_order)))) and (__ASSUME__HIST => (__GUARANTEE8 and (__GUARANTEE7 and (__GUARANTEE6 and (__GUARANTEE5 and (__GUARANTEE4 and (__GUARANTEE3 and (__GUARANTEE2 and (__GUARANTEE1 and __GUARANTEE0)))))))))))))))))))))))))))))))))))))))));

  --%IVC __GUARANTEE0, __GUARANTEE1, __GUARANTEE2, __GUARANTEE3, __GUARANTEE4, __GUARANTEE5, __GUARANTEE6, __GUARANTEE7, __GUARANTEE8;

tel;

node _TOP__deliveryItemMechanism(
  __ASSUME__HIST : bool;
  delivery_cmd_in : Data_Types__PackageDeliveryCommand;
  time : real;
  release_cmd : bool;
  abort_cmd : bool;
  no_op_cmd : bool;
  delivery_status_out : Data_Types__DeliveryStatus;
  package_is_secure : bool
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
  __GUARANTEE1 : bool;
  __GUARANTEE2 : bool;
let
  __GUARANTEE0 = Agree_Nodes__InitiallyX((delivery_status_out = Data_Types__DeliveryStatus_NOT_STARTED));

  __GUARANTEE1 = (true -> ((no_op_cmd or abort_cmd) => (delivery_status_out = Data_Types__DeliveryStatus_NOT_STARTED)));

  __GUARANTEE2 = (true -> (release_cmd => (delivery_status_out <> Data_Types__DeliveryStatus_NOT_STARTED)));

  __ASSERT = ((no_op_cmd = (delivery_cmd_in = Data_Types__PackageDeliveryCommand_NO_OPERATION)) and ((abort_cmd = (delivery_cmd_in = Data_Types__PackageDeliveryCommand_ABORT_DELIVERY)) and ((release_cmd = (delivery_cmd_in = Data_Types__PackageDeliveryCommand_RELEASE_PACKAGE)) and (__ASSUME__HIST => (__GUARANTEE2 and (__GUARANTEE1 and __GUARANTEE0))))));

  --%IVC __GUARANTEE0, __GUARANTEE1, __GUARANTEE2;

tel;

node _TOP__connector(
  __ASSUME__HIST : bool;
  bus_in : Data_Types__InputBus__impl;
  time : real;
  bus_out : Data_Types__InputBus__impl
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
let
  __GUARANTEE0 = (bus_out = bus_in);

  __ASSERT = (__ASSUME__HIST => __GUARANTEE0);

  --%IVC __GUARANTEE0;

tel;

node main(
  radio__comm_out : bool;
  radio__radio_out : Data_Types__RadioResponse__impl;
  radio__health_status : bool;
  radio____ASSUME__HIST : bool;
  deliveryPlanner__recent_order : Data_Types__DeliveryOrder__impl;
  deliveryPlanner__truck_position : Data_Types__Position__impl;
  deliveryPlanner__dest_position : Data_Types__Position__impl;
  deliveryPlanner__expensive_item : bool;
  deliveryPlanner__confirmation : bool;
  deliveryPlanner__confirmation_timeout : bool;
  deliveryPlanner__get_clearance_timeout : bool;
  deliveryPlanner__delivery_failed : bool;
  deliveryPlanner__delivery_completed : bool;
  deliveryPlanner__is_safe_landing : bool;
  deliveryPlanner__on_off : bool;
  deliveryPlanner__init_criteria_succeed : bool;
  deliveryPlanner__init_criteria_failed : bool;
  deliveryPlanner__abort_cmd : bool;
  deliveryPlanner__mission_store_release_sequence : bool;
  deliveryPlanner__okay_to_launch : bool;
  deliveryPlanner__separation : bool;
  deliveryPlanner__destination_location_reached : bool;
  deliveryPlanner__no_clearance : bool;
  deliveryPlanner__successfull_delivery : bool;
  deliveryPlanner__exhaustive_retries : bool;
  deliveryPlanner__internal_error_detected : bool;
  deliveryPlanner__truck_location_reached : bool;
  deliveryPlanner__connected : bool;
  deliveryPlanner__off_mode : bool;
  deliveryPlanner__abort_mode : bool;
  deliveryPlanner__init_mode : bool;
  deliveryPlanner__ready_mode : bool;
  deliveryPlanner__launch_mode : bool;
  deliveryPlanner__flying_to_dest_mode : bool;
  deliveryPlanner__making_delivery_mode : bool;
  deliveryPlanner__return_to_truck_mode : bool;
  deliveryPlanner__radio_cmd : bool;
  deliveryPlanner__delivery_cmd : Data_Types__PackageDeliveryCommand;
  deliveryPlanner__dest_location : Data_Types__Position__impl;
  deliveryPlanner__bus_out : bool;
  deliveryPlanner__nav_cmd : bool;
  deliveryPlanner__camera : bool;
  deliveryPlanner__probe_safe_landing : Data_Types__ProbeSafeLanding__impl;
  deliveryPlanner__constellation : Data_Types__Constellation;
  deliveryPlanner__launch_pos : Data_Types__Position__impl;
  deliveryPlanner__probe_init_mode : bool;
  deliveryPlanner__probe_abort_mode : bool;
  deliveryPlanner__target_clear : bool;
  deliveryPlanner__valid_marker : bool;
  deliveryPlanner____ASSUME__HIST : bool;
  deliveryItemMechanism__release_cmd : bool;
  deliveryItemMechanism__abort_cmd : bool;
  deliveryItemMechanism__no_op_cmd : bool;
  deliveryItemMechanism__delivery_status_out : Data_Types__DeliveryStatus;
  deliveryItemMechanism__package_is_secure : bool;
  deliveryItemMechanism____ASSUME__HIST : bool;
  connector__bus_out : Data_Types__InputBus__impl;
  connector____ASSUME__HIST : bool;
  delivery_started : bool;
  confirmation_requested : bool;
  acknowledge_received : bool;
  target_confirmed : bool;
  valuable_package : bool;
  power_signal : bool;
  isOn : bool;
  most_recent_constellation : Data_Types__Constellation;
  most_recent_launch_location : Data_Types__Position__impl;
  most_recent_order : Data_Types__DeliveryOrder__impl;
  most_recent_delivery_location : Data_Types__Position__impl;
  release_cmd : bool;
  comm2 : bool;
  bus2 : bool;
  radio_cmd : bool;
  radio_response : Data_Types__RadioResponse__impl;
  delivery_status : Data_Types__DeliveryStatus;
  actuation_out : bool;
  probe_init_mode : bool;
  probe_abort_mode : bool;
  probe_delivery_cmd : Data_Types__PackageDeliveryCommand;
  probe_constellation : Data_Types__Constellation;
  probe_launch_location : Data_Types__Position__impl;
  probe_delivery_location : Data_Types__Position__impl;
  probe_fly_cmd : bool;
  radio__comm_in : Data_Types__RadioResponse__impl;
  radio__radio_in : bool;
  radio__time : real;
  deliveryPlanner__bus_in : Data_Types__InputBus__impl;
  deliveryPlanner__cur_pos : Data_Types__Position__impl;
  deliveryPlanner__delivery_status : Data_Types__DeliveryStatus;
  deliveryPlanner__radio_response : Data_Types__RadioResponse__impl;
  deliveryPlanner__camera_result : int;
  deliveryPlanner__gps_health_status : bool;
  deliveryPlanner__imu_health_status : bool;
  deliveryPlanner__rdo_health_status : bool;
  deliveryPlanner__cam_health_status : bool;
  deliveryPlanner__package_is_secure : bool;
  deliveryPlanner__time : real;
  deliveryItemMechanism__delivery_cmd_in : Data_Types__PackageDeliveryCommand;
  deliveryItemMechanism__time : real;
  connector__bus_in : Data_Types__InputBus__impl;
  connector__time : real;
  satellite0_sig_pos : Data_Types__Position__impl;
  satellite1_sig_pos : Data_Types__Position__impl;
  bus1 : Data_Types__InputBus__impl;
  comm1 : Data_Types__RadioResponse__impl;
  time : real
) returns (

);
var
  __ASSUME__HIST : bool;
  __GUARANTEE0 : bool;
  __GUARANTEE1 : bool;
  __GUARANTEE2 : bool;
  __GUARANTEE3 : bool;
  __GUARANTEE4 : bool;
  __GUARANTEE5 : bool;
let
  --%MAIN;
  __ASSUME__HIST = (connector____ASSUME__HIST and (deliveryItemMechanism____ASSUME__HIST and (deliveryPlanner____ASSUME__HIST and (radio____ASSUME__HIST and true))));

  __GUARANTEE0 = (isOn => (most_recent_constellation = probe_constellation));

  __GUARANTEE1 = (isOn => (most_recent_launch_location = probe_launch_location));

  __GUARANTEE2 = (isOn => (most_recent_delivery_location = probe_delivery_location));

  __GUARANTEE3 = ((release_cmd and valuable_package) => target_confirmed);

  __GUARANTEE4 = ((delivery_started and valuable_package) => confirmation_requested);

  __GUARANTEE5 = (probe_fly_cmd => Agree_Nodes__Since(probe_init_mode, (not probe_abort_mode)));

  assert (time = radio__time);

  assert _TOP__radio(radio____ASSUME__HIST, radio__comm_in, radio__radio_in, radio__time, radio__comm_out, radio__radio_out, radio__health_status);

  assert (radio____ASSUME__HIST = __HIST(true));

  assert (time = deliveryPlanner__time);

  assert _TOP__deliveryPlanner(deliveryPlanner____ASSUME__HIST, deliveryPlanner__bus_in, deliveryPlanner__cur_pos, deliveryPlanner__delivery_status, deliveryPlanner__radio_response, deliveryPlanner__camera_result, deliveryPlanner__gps_health_status, deliveryPlanner__imu_health_status, deliveryPlanner__rdo_health_status, deliveryPlanner__cam_health_status, deliveryPlanner__package_is_secure, deliveryPlanner__time, deliveryPlanner__recent_order, deliveryPlanner__truck_position, deliveryPlanner__dest_position, deliveryPlanner__expensive_item, deliveryPlanner__confirmation, deliveryPlanner__confirmation_timeout, deliveryPlanner__get_clearance_timeout, deliveryPlanner__delivery_failed, deliveryPlanner__delivery_completed, deliveryPlanner__is_safe_landing, deliveryPlanner__on_off, deliveryPlanner__init_criteria_succeed, deliveryPlanner__init_criteria_failed, deliveryPlanner__abort_cmd, deliveryPlanner__mission_store_release_sequence, deliveryPlanner__okay_to_launch, deliveryPlanner__separation, deliveryPlanner__destination_location_reached, deliveryPlanner__no_clearance, deliveryPlanner__successfull_delivery, deliveryPlanner__exhaustive_retries, deliveryPlanner__internal_error_detected, deliveryPlanner__truck_location_reached, deliveryPlanner__connected, deliveryPlanner__off_mode, deliveryPlanner__abort_mode, deliveryPlanner__init_mode, deliveryPlanner__ready_mode, deliveryPlanner__launch_mode, deliveryPlanner__flying_to_dest_mode, deliveryPlanner__making_delivery_mode, deliveryPlanner__return_to_truck_mode, deliveryPlanner__radio_cmd, deliveryPlanner__delivery_cmd, deliveryPlanner__dest_location, deliveryPlanner__bus_out, deliveryPlanner__nav_cmd, deliveryPlanner__camera, deliveryPlanner__probe_safe_landing, deliveryPlanner__constellation, deliveryPlanner__launch_pos, deliveryPlanner__probe_init_mode, deliveryPlanner__probe_abort_mode, deliveryPlanner__target_clear, deliveryPlanner__valid_marker);

  assert (deliveryPlanner____ASSUME__HIST = __HIST(true));

  assert (time = deliveryItemMechanism__time);

  assert _TOP__deliveryItemMechanism(deliveryItemMechanism____ASSUME__HIST, deliveryItemMechanism__delivery_cmd_in, deliveryItemMechanism__time, deliveryItemMechanism__release_cmd, deliveryItemMechanism__abort_cmd, deliveryItemMechanism__no_op_cmd, deliveryItemMechanism__delivery_status_out, deliveryItemMechanism__package_is_secure);

  assert (deliveryItemMechanism____ASSUME__HIST = __HIST(true));

  assert (time = connector__time);

  assert _TOP__connector(connector____ASSUME__HIST, connector__bus_in, connector__time, connector__bus_out);

  assert (connector____ASSUME__HIST = __HIST(true));

  assert (bus1 = connector__bus_in);

  assert (comm1 = radio__comm_in);

  assert (radio__comm_out = comm2);

  assert (radio__radio_out = deliveryPlanner__radio_response);

  assert (radio__radio_out = radio_response);

  assert (radio__health_status = deliveryPlanner__rdo_health_status);

  assert (deliveryPlanner__radio_cmd = radio__radio_in);

  assert (deliveryPlanner__radio_cmd = radio_cmd);

  assert (deliveryPlanner__delivery_cmd = deliveryItemMechanism__delivery_cmd_in);

  assert (deliveryPlanner__delivery_cmd = probe_delivery_cmd);

  assert (deliveryPlanner__bus_out = bus2);

  assert (deliveryPlanner__nav_cmd = probe_fly_cmd);

  assert (deliveryPlanner__probe_init_mode = probe_init_mode);

  assert (deliveryPlanner__probe_abort_mode = probe_abort_mode);

  assert (deliveryItemMechanism__delivery_status_out = deliveryPlanner__delivery_status);

  assert (deliveryItemMechanism__delivery_status_out = delivery_status);

  assert (deliveryItemMechanism__package_is_secure = deliveryPlanner__package_is_secure);

  assert (connector__bus_out = deliveryPlanner__bus_in);

  assert (delivery_started = (delivery_status <> Data_Types__DeliveryStatus_NOT_STARTED));

  assert (confirmation_requested = Agree_Nodes__HasHappened(radio_cmd));

  assert (acknowledge_received = (comm1.data_available and comm1.target_confirmed));

  assert (target_confirmed = Agree_Nodes__HasHappened((confirmation_requested and acknowledge_received)));

  assert (valuable_package = (most_recent_order.item_value >= 100.0));

  assert (power_signal = (bus1.on_off and bus1.connected));

  assert (isOn = (false -> (if power_signal then (not (pre isOn)) else (pre isOn))));

  assert (most_recent_constellation = (if probe_init_mode then bus1.constellation else (bus1.constellation -> (pre most_recent_constellation))));

  assert (most_recent_launch_location = (if probe_init_mode then bus1.launch_pos else (bus1.launch_pos -> (pre most_recent_launch_location))));

  assert (most_recent_order = (if probe_init_mode then bus1.order else (bus1.order -> (pre most_recent_order))));

  assert (most_recent_delivery_location = most_recent_order.target_position);

  assert (release_cmd = (probe_delivery_cmd = Data_Types__PackageDeliveryCommand_RELEASE_PACKAGE));

  assert true;

  assert (((time = 0.0) -> (time > (pre time))) and (true -> (time = ((pre time) + (time - (pre time))))));

  -- %PROPERTY __ASSUME__HIST;
  -- %PROPERTY __GUARANTEE0;
  -- %PROPERTY __GUARANTEE1;
  -- %PROPERTY __GUARANTEE2;
  --%PROPERTY __GUARANTEE3;
  -- %PROPERTY __GUARANTEE4;
  -- %PROPERTY __GUARANTEE5;

tel;

node Agree_Nodes__FirstLocation(
  X : Data_Types__Position__impl
) returns (
  Y : Data_Types__Position__impl
);
let
  Y = (X -> (pre Y));

tel;

node _CLOCKED_Agree_Nodes__FirstLocation(
  _CLK : bool;
  _INIT : bool;
  X : Data_Types__Position__impl
) returns (
  Y : Data_Types__Position__impl
);
var
  _STATE0 : Data_Types__Position__impl;
let
  Y = (if _CLK then (if _INIT then X else _STATE0) else (pre Y));

  _STATE0 = (if _CLK then (pre Y) else (pre _STATE0));

tel;

node Agree_Nodes__Duration(
  p : bool
) returns (
  r : int
);
let
  r = ((if p then 1 else 0) -> (if p then ((pre r) + 1) else 0));

tel;

node _CLOCKED_Agree_Nodes__Duration(
  _CLK : bool;
  _INIT : bool;
  p : bool
) returns (
  r : int
);
var
  _STATE0 : int;
let
  r = (if _CLK then (if _INIT then (if p then 1 else 0) else (if p then (_STATE0 + 1) else 0)) else (pre r));

  _STATE0 = (if _CLK then (pre r) else (pre _STATE0));

tel;

node Agree_Nodes__close_locations(
  p1 : Data_Types__Position__impl;
  p2 : Data_Types__Position__impl
) returns (
  are_close : bool
);
let
  are_close = (p1 = p2);

tel;

node _CLOCKED_Agree_Nodes__close_locations(
  _CLK : bool;
  _INIT : bool;
  p1 : Data_Types__Position__impl;
  p2 : Data_Types__Position__impl
) returns (
  are_close : bool
);
let
  are_close = (if _CLK then (p1 = p2) else (pre are_close));

tel;

node Agree_Nodes__InitiallyX(
  X : bool
) returns (
  Y : bool
);
let
  Y = (X -> true);

tel;

node _CLOCKED_Agree_Nodes__InitiallyX(
  _CLK : bool;
  _INIT : bool;
  X : bool
) returns (
  Y : bool
);
let
  Y = (if _CLK then (if _INIT then X else true) else (pre Y));

tel;

node Agree_Nodes__Since(
  X : bool;
  Y : bool
) returns (
  Z : bool
);
let
  Z = (X or (Y and (false -> (pre Z))));

tel;

node _CLOCKED_Agree_Nodes__Since(
  _CLK : bool;
  _INIT : bool;
  X : bool;
  Y : bool
) returns (
  Z : bool
);
var
  _STATE0 : bool;
let
  Z = (if _CLK then (X or (Y and (if _INIT then false else _STATE0))) else (pre Z));

  _STATE0 = (if _CLK then (pre Z) else (pre _STATE0));

tel;

node Agree_Nodes__HasHappened(
  X : bool
) returns (
  Y : bool
);
let
  Y = (X or (false -> (pre Y)));

tel;

node _CLOCKED_Agree_Nodes__HasHappened(
  _CLK : bool;
  _INIT : bool;
  X : bool
) returns (
  Y : bool
);
var
  _STATE0 : bool;
let
  Y = (if _CLK then (X or (if _INIT then false else _STATE0)) else (pre Y));

  _STATE0 = (if _CLK then (pre Y) else (pre _STATE0));

tel;

node __HIST(
  input : bool
) returns (
  hist : bool
);
let
  hist = (input -> ((pre hist) and input));

tel;

node __MinPos(
  a : real;
  b : real
) returns (
  ret : real
);
let
  ret = (if (a <= 0.0) then b else (if (b <= 0.0) then a else (if (a <= b) then a else b)));

tel;

node __Rise(
  input : bool
) returns (
  output : bool
);
let
  output = (input -> ((pre (not input)) and input));

tel;

node __Fall(
  input : bool
) returns (
  output : bool
);
let
  output = ((not input) -> ((pre input) and (not input)));

tel;

