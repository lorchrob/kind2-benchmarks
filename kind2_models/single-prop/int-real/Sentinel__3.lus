type Base_Types__Boolean = bool;
type Base_Types__Unsigned = int;
type Base_Types__Unsigned_64 = int;
type Base_Types__Unsigned_32 = int;
type Base_Types__Unsigned_16 = int;
type Base_Types__Unsigned_8 = int;
type Base_Types__Integer = int;
type Base_Types__Integer_64 = int;
type Base_Types__Integer_32 = int;
type Base_Types__Integer_16 = int;
type Base_Types__Integer_8 = int;
type Base_Types__Float = real;
type Base_Types__Float_32 = real;
type Base_Types__Float_64 = real;

node _TOP__counter(
  __ASSUME__HIST : bool;
  time : real;
  Output : int
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
let
  __GUARANTEE0 = (Output = (0 -> ((pre Output) + 1)));

  __ASSERT = (__ASSUME__HIST => __GUARANTEE0);

  --%IVC __GUARANTEE0;

tel;

node _TOP__sieve(
  __ASSUME__HIST : bool;
  __ASSUME0 : bool;
  Input : int;
  time : real;
  Output : int
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
let
  __GUARANTEE0 = (Output = (if ((Input mod 7) = 0) then (-1) else Input));

  __ASSERT = ((__ASSUME__HIST => __GUARANTEE0) and (__ASSUME0 = ((Input = 0) -> ((pre Input) < Input))));

  --%IVC __GUARANTEE0;

tel;

node _TOP__target(
  __ASSUME__HIST : bool;
  __ASSUME0 : bool;
  Input : int;
  time : real
) returns (
  __ASSERT : bool
);
let
  __ASSERT = ((__ASSUME__HIST => true) and (__ASSUME0 = ((Input = (-1)) or (((Input = 0) -> ((pre Input) < Input)) and (not ((Input mod 7) = 0))))));

tel;

node main(
  counter__Output : int;
  counter____ASSUME__HIST : bool;
  sieve__Output : int;
  sieve____ASSUME0 : bool;
  sieve____ASSUME__HIST : bool;
  target____ASSUME0 : bool;
  target____ASSUME__HIST : bool;
  counter__time : real;
  sieve__Input : int;
  sieve__time : real;
  target__Input : int;
  target__time : real;
  time : real
) returns (

);
var
  __ASSUME__HIST : bool;
let
  --%MAIN;
  __ASSUME__HIST = (target____ASSUME__HIST and (sieve____ASSUME__HIST and (counter____ASSUME__HIST and true)));

  assert (time = counter__time);

  assert _TOP__counter(counter____ASSUME__HIST, counter__time, counter__Output);

  assert (counter____ASSUME__HIST = __HIST(true));

  assert (time = sieve__time);

  assert _TOP__sieve(sieve____ASSUME__HIST, sieve____ASSUME0, sieve__Input, sieve__time, sieve__Output);

  assert (sieve____ASSUME__HIST = __HIST(sieve____ASSUME0));

  assert (time = target__time);

  assert _TOP__target(target____ASSUME__HIST, target____ASSUME0, target__Input, target__time);

  assert (target____ASSUME__HIST = __HIST(target____ASSUME0));

  assert (counter__Output = sieve__Input);

  assert (sieve__Output = target__Input);

  assert true;

  assert (((time = 0.0) -> (time > (pre time))) and (true -> (time = ((pre time) + (time - (pre time))))));

  -- %PROPERTY sieve____ASSUME0;
  -- %PROPERTY target____ASSUME0;
  --%PROPERTY __ASSUME__HIST;

tel;

node __HIST(
  input : bool
) returns (
  hist : bool
);
let
  hist = (input -> ((pre hist) and input));

tel;

node __MinPos(
  a : real;
  b : real
) returns (
  ret : real
);
let
  ret = (if (a <= 0.0) then b else (if (b <= 0.0) then a else (if (a <= b) then a else b)));

tel;

node __Rise(
  input : bool
) returns (
  output : bool
);
let
  output = (input -> ((pre (not input)) and input));

tel;

node __Fall(
  input : bool
) returns (
  output : bool
);
let
  output = ((not input) -> ((pre input) and (not input)));

tel;

