type Deep_Taxi__Command__Impl = struct {Heading : real; Speed : int};
type Base_Types__Boolean = bool;
type Base_Types__Unsigned = int;
type Base_Types__Unsigned_64 = int;
type Base_Types__Unsigned_32 = int;
type Base_Types__Unsigned_16 = int;
type Base_Types__Unsigned_8 = int;
type Base_Types__Integer = int;
type Base_Types__Integer_64 = int;
type Base_Types__Integer_32 = int;
type Base_Types__Integer_16 = int;
type Base_Types__Integer_8 = int;
type Base_Types__Float = real;
type Base_Types__Float_32 = real;
type Base_Types__Float_64 = real;

node _TOP__Monitor(
  __ASSUME__HIST : bool;
  Actual_Heading___EVENT_ : bool;
  Actual_Heading : real;
  Estimated_Heading___EVENT_ : bool;
  Estimated_Heading : real;
  Actual_CTE___EVENT_ : bool;
  Actual_CTE : real;
  Estimated_CTE___EVENT_ : bool;
  Estimated_CTE : real;
  time : real;
  Alert___EVENT_ : bool;
  Alert : bool
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
let
  __GUARANTEE0 = (if Deep_Taxi__MONITOR_CONDITION(Actual_Heading, Estimated_Heading, Actual_CTE, Estimated_CTE) then (Alert = false) else (Alert = true));

  __ASSERT = (__ASSUME__HIST => __GUARANTEE0);

  --%IVC __GUARANTEE0;

tel;

node _TOP__Controller(
  __ASSUME__HIST : bool;
  Heading___EVENT_ : bool;
  Heading : real;
  CTE___EVENT_ : bool;
  CTE : real;
  time : real;
  Control_Command___EVENT_ : bool;
  Control_Command : Deep_Taxi__Command__Impl
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
let
  __GUARANTEE0 = (Control_Command.Speed > 0);

  __ASSERT = (__ASSUME__HIST => __GUARANTEE0);

  --%IVC __GUARANTEE0;

tel;

node _TOP__Safety(
  __ASSUME__HIST : bool;
  time : real;
  Safe_Command___EVENT_ : bool;
  Safe_Command : Deep_Taxi__Command__Impl
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
let
  __GUARANTEE0 = (Safe_Command.Speed = 0);

  __ASSERT = (__ASSUME__HIST => __GUARANTEE0);

  --%IVC __GUARANTEE0;

tel;

node _TOP__Switch(
  __ASSUME__HIST : bool;
  Safety_Trigger___EVENT_ : bool;
  Safety_Trigger : bool;
  Control_Command___EVENT_ : bool;
  Control_Command : Deep_Taxi__Command__Impl;
  Safe_Command___EVENT_ : bool;
  Safe_Command : Deep_Taxi__Command__Impl;
  time : real;
  Switch_Command___EVENT_ : bool;
  Switch_Command : Deep_Taxi__Command__Impl
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
let
  __GUARANTEE0 = (if (Safety_Trigger = false) then (Switch_Command = Control_Command) else (Switch_Command = Safe_Command));

  __ASSERT = (__ASSUME__HIST => __GUARANTEE0);

  --%IVC __GUARANTEE0;

tel;

node main(
  Monitor__Alert___EVENT_ : bool;
  Monitor__Alert : bool;
  Monitor____ASSUME__HIST : bool;
  Controller__Control_Command___EVENT_ : bool;
  Controller__Control_Command : Deep_Taxi__Command__Impl;
  Controller____ASSUME__HIST : bool;
  Safety__Safe_Command___EVENT_ : bool;
  Safety__Safe_Command : Deep_Taxi__Command__Impl;
  Safety____ASSUME__HIST : bool;
  Switch__Switch_Command___EVENT_ : bool;
  Switch__Switch_Command : Deep_Taxi__Command__Impl;
  Switch____ASSUME__HIST : bool;
  Aircraft_Command___EVENT_ : bool;
  Aircraft_Command : Deep_Taxi__Command__Impl;
  Monitor__Actual_Heading___EVENT_ : bool;
  Monitor__Actual_Heading : real;
  Monitor__Estimated_Heading___EVENT_ : bool;
  Monitor__Estimated_Heading : real;
  Monitor__Actual_CTE___EVENT_ : bool;
  Monitor__Actual_CTE : real;
  Monitor__Estimated_CTE___EVENT_ : bool;
  Monitor__Estimated_CTE : real;
  Monitor__time : real;
  Controller__Heading___EVENT_ : bool;
  Controller__Heading : real;
  Controller__CTE___EVENT_ : bool;
  Controller__CTE : real;
  Controller__time : real;
  Safety__time : real;
  Switch__Safety_Trigger___EVENT_ : bool;
  Switch__Safety_Trigger : bool;
  Switch__Control_Command___EVENT_ : bool;
  Switch__Control_Command : Deep_Taxi__Command__Impl;
  Switch__Safe_Command___EVENT_ : bool;
  Switch__Safe_Command : Deep_Taxi__Command__Impl;
  Switch__time : real;
  IRS_Heading___EVENT_ : bool;
  IRS_Heading : real;
  IRS_CTE___EVENT_ : bool;
  IRS_CTE : real;
  CAM_VIDEO___EVENT_ : bool;
  time : real
) returns (

);
var
  __ASSUME0 : bool;
  __ASSUME__HIST : bool;
  __GUARANTEE0 : bool;
let
  --%MAIN;
  __ASSUME0 = (IRS_CTE < 10.0);

  __ASSUME__HIST = (Switch____ASSUME__HIST and (Safety____ASSUME__HIST and (Controller____ASSUME__HIST and (Monitor____ASSUME__HIST and true))));

  __GUARANTEE0 = Deep_Taxi__SAFE_COMMAND(IRS_Heading, IRS_CTE, Aircraft_Command);

  assert __ASSUME0;

  assert (time = Monitor__time);

  assert _TOP__Monitor(Monitor____ASSUME__HIST, Monitor__Actual_Heading___EVENT_, Monitor__Actual_Heading, Monitor__Estimated_Heading___EVENT_, Monitor__Estimated_Heading, Monitor__Actual_CTE___EVENT_, Monitor__Actual_CTE, Monitor__Estimated_CTE___EVENT_, Monitor__Estimated_CTE, Monitor__time, Monitor__Alert___EVENT_, Monitor__Alert);

  assert (Monitor____ASSUME__HIST = __HIST(true));

  assert (time = Controller__time);

  assert _TOP__Controller(Controller____ASSUME__HIST, Controller__Heading___EVENT_, Controller__Heading, Controller__CTE___EVENT_, Controller__CTE, Controller__time, Controller__Control_Command___EVENT_, Controller__Control_Command);

  assert (Controller____ASSUME__HIST = __HIST(true));

  assert (time = Safety__time);

  assert _TOP__Safety(Safety____ASSUME__HIST, Safety__time, Safety__Safe_Command___EVENT_, Safety__Safe_Command);

  assert (Safety____ASSUME__HIST = __HIST(true));

  assert (time = Switch__time);

  assert _TOP__Switch(Switch____ASSUME__HIST, Switch__Safety_Trigger___EVENT_, Switch__Safety_Trigger, Switch__Control_Command___EVENT_, Switch__Control_Command, Switch__Safe_Command___EVENT_, Switch__Safe_Command, Switch__time, Switch__Switch_Command___EVENT_, Switch__Switch_Command);

  assert (Switch____ASSUME__HIST = __HIST(true));

  assert (IRS_Heading = Monitor__Actual_Heading);

  assert (IRS_Heading___EVENT_ = Monitor__Actual_Heading___EVENT_);

  assert (IRS_CTE = Monitor__Actual_CTE);

  assert (IRS_CTE___EVENT_ = Monitor__Actual_CTE___EVENT_);

  assert (Monitor__Alert = Switch__Safety_Trigger);

  assert (Monitor__Alert___EVENT_ = Switch__Safety_Trigger___EVENT_);

  assert (Controller__Control_Command = Switch__Control_Command);

  assert (Controller__Control_Command___EVENT_ = Switch__Control_Command___EVENT_);

  assert (Safety__Safe_Command = Switch__Safe_Command);

  assert (Safety__Safe_Command___EVENT_ = Switch__Safe_Command___EVENT_);

  assert (Switch__Switch_Command = Aircraft_Command);

  assert (Switch__Switch_Command___EVENT_ = Aircraft_Command___EVENT_);

  assert (Controller__Control_Command.Speed = 1);

  assert (Deep_Taxi__MONITOR_CONDITION(IRS_Heading, Monitor__Estimated_Heading, IRS_CTE, Monitor__Estimated_CTE) => Deep_Taxi__SAFE_COMMAND(IRS_Heading, IRS_CTE, Controller__Control_Command));

  assert true;

  assert (((time = 0.0) -> (time > (pre time))) and (true -> (time = ((pre time) + (time - (pre time))))));

  --%PROPERTY __ASSUME__HIST;
  -- %PROPERTY __GUARANTEE0;

  --%IVC __ASSUME0;

tel;

node Deep_Taxi__abs(
  num : real
) returns (
  _outvar : real
);
let
  _outvar = (if (num >= 0.0) then num else (-num));

tel;

node _CLOCKED_Deep_Taxi__abs(
  _CLK : bool;
  _INIT : bool;
  num : real
) returns (
  _outvar : real
);
let
  _outvar = (if _CLK then (if (num >= 0.0) then num else (-num)) else (pre _outvar));

tel;

node Deep_Taxi__MONITOR_CONDITION(
  Actual_Heading : real;
  Estimated_Heading : real;
  Actual_CTE : real;
  Estimated_CTE : real
) returns (
  _outvar : bool
);
let
  _outvar = ((Deep_Taxi__abs((Actual_Heading - Estimated_Heading)) <= 5.0) and (Deep_Taxi__abs((Actual_CTE - Estimated_CTE)) <= 1.0));

tel;

node _CLOCKED_Deep_Taxi__MONITOR_CONDITION(
  _CLK : bool;
  _INIT : bool;
  Actual_Heading : real;
  Estimated_Heading : real;
  Actual_CTE : real;
  Estimated_CTE : real
) returns (
  _outvar : bool
);
let
  _outvar = (if _CLK then ((_CLOCKED_Deep_Taxi__abs(_CLK, _INIT, (Actual_Heading - Estimated_Heading)) <= 5.0) and (_CLOCKED_Deep_Taxi__abs(_CLK, _INIT, (Actual_CTE - Estimated_CTE)) <= 1.0)) else (pre _outvar));

tel;

node Deep_Taxi__LINEAR_SIN(
  theta : real
) returns (
  _outvar : real
);
let
  _outvar = (if ((theta >= (-90.0)) and (theta < (-85.0))) then (-1.0) else (if ((theta >= (-85.0)) and (theta < (-80.0))) then (-0.9962) else (if ((theta >= (-80.0)) and (theta < (-75.0))) then (-0.9848) else (if ((theta >= (-75.0)) and (theta < (-70.0))) then (-0.9659) else (if ((theta >= (-70.0)) and (theta < (-65.0))) then (-0.9397) else (if ((theta >= (-65.0)) and (theta < (-60.0))) then (-0.9063) else (if ((theta >= (-60.0)) and (theta < (-55.0))) then (-0.866) else (if ((theta >= (-55.0)) and (theta < (-50.0))) then (-0.8192) else (if ((theta >= (-50.0)) and (theta < (-45.0))) then (-0.766) else (if ((theta >= (-45.0)) and (theta < (-40.0))) then (-0.7071) else (if ((theta >= (-40.0)) and (theta < (-35.0))) then (-0.6428) else (if ((theta >= (-35.0)) and (theta < (-30.0))) then (-0.5736) else (if ((theta >= (-30.0)) and (theta < (-25.0))) then (-0.5) else (if ((theta >= (-25.0)) and (theta < (-20.0))) then (-0.4226) else (if ((theta >= (-20.0)) and (theta < (-15.0))) then (-0.342) else (if ((theta >= (-15.0)) and (theta < (-10.0))) then (-0.2588) else (if ((theta >= (-10.0)) and (theta < (-5.0))) then (-0.1736) else (if ((theta >= (-5.0)) and (theta < 0.0)) then (-0.0872) else (if (theta = 0.0) then 0.0 else (if ((theta > 0.0) and (theta <= 5.0)) then 0.0872 else (if ((theta > 5.0) and (theta <= 10.0)) then 0.1736 else (if ((theta > 10.0) and (theta <= 15.0)) then 0.2588 else (if ((theta > 15.0) and (theta <= 20.0)) then 0.342 else (if ((theta > 20.0) and (theta <= 25.0)) then 0.4226 else (if ((theta > 25.0) and (theta <= 30.0)) then 0.5 else (if ((theta > 30.0) and (theta <= 35.0)) then 0.5736 else (if ((theta > 35.0) and (theta <= 40.0)) then 0.6428 else (if ((theta > 40.0) and (theta <= 45.0)) then 0.7071 else (if ((theta > 45.0) and (theta <= 50.0)) then 0.766 else (if ((theta > 50.0) and (theta <= 55.0)) then 0.8192 else (if ((theta > 55.0) and (theta <= 60.0)) then 0.866 else (if ((theta > 60.0) and (theta <= 65.0)) then 0.9063 else (if ((theta > 65.0) and (theta <= 70.0)) then 0.9397 else (if ((theta > 70.0) and (theta <= 75.0)) then 0.9659 else (if ((theta > 75.0) and (theta <= 80.0)) then 0.9848 else (if ((theta > 80.0) and (theta <= 85.0)) then 0.9962 else 1.0))))))))))))))))))))))))))))))))))));

tel;

node _CLOCKED_Deep_Taxi__LINEAR_SIN(
  _CLK : bool;
  _INIT : bool;
  theta : real
) returns (
  _outvar : real
);
let
  _outvar = (if _CLK then (if ((theta >= (-90.0)) and (theta < (-85.0))) then (-1.0) else (if ((theta >= (-85.0)) and (theta < (-80.0))) then (-0.9962) else (if ((theta >= (-80.0)) and (theta < (-75.0))) then (-0.9848) else (if ((theta >= (-75.0)) and (theta < (-70.0))) then (-0.9659) else (if ((theta >= (-70.0)) and (theta < (-65.0))) then (-0.9397) else (if ((theta >= (-65.0)) and (theta < (-60.0))) then (-0.9063) else (if ((theta >= (-60.0)) and (theta < (-55.0))) then (-0.866) else (if ((theta >= (-55.0)) and (theta < (-50.0))) then (-0.8192) else (if ((theta >= (-50.0)) and (theta < (-45.0))) then (-0.766) else (if ((theta >= (-45.0)) and (theta < (-40.0))) then (-0.7071) else (if ((theta >= (-40.0)) and (theta < (-35.0))) then (-0.6428) else (if ((theta >= (-35.0)) and (theta < (-30.0))) then (-0.5736) else (if ((theta >= (-30.0)) and (theta < (-25.0))) then (-0.5) else (if ((theta >= (-25.0)) and (theta < (-20.0))) then (-0.4226) else (if ((theta >= (-20.0)) and (theta < (-15.0))) then (-0.342) else (if ((theta >= (-15.0)) and (theta < (-10.0))) then (-0.2588) else (if ((theta >= (-10.0)) and (theta < (-5.0))) then (-0.1736) else (if ((theta >= (-5.0)) and (theta < 0.0)) then (-0.0872) else (if (theta = 0.0) then 0.0 else (if ((theta > 0.0) and (theta <= 5.0)) then 0.0872 else (if ((theta > 5.0) and (theta <= 10.0)) then 0.1736 else (if ((theta > 10.0) and (theta <= 15.0)) then 0.2588 else (if ((theta > 15.0) and (theta <= 20.0)) then 0.342 else (if ((theta > 20.0) and (theta <= 25.0)) then 0.4226 else (if ((theta > 25.0) and (theta <= 30.0)) then 0.5 else (if ((theta > 30.0) and (theta <= 35.0)) then 0.5736 else (if ((theta > 35.0) and (theta <= 40.0)) then 0.6428 else (if ((theta > 40.0) and (theta <= 45.0)) then 0.7071 else (if ((theta > 45.0) and (theta <= 50.0)) then 0.766 else (if ((theta > 50.0) and (theta <= 55.0)) then 0.8192 else (if ((theta > 55.0) and (theta <= 60.0)) then 0.866 else (if ((theta > 60.0) and (theta <= 65.0)) then 0.9063 else (if ((theta > 65.0) and (theta <= 70.0)) then 0.9397 else (if ((theta > 70.0) and (theta <= 75.0)) then 0.9659 else (if ((theta > 75.0) and (theta <= 80.0)) then 0.9848 else (if ((theta > 80.0) and (theta <= 85.0)) then 0.9962 else 1.0)))))))))))))))))))))))))))))))))))) else (pre _outvar));

tel;

node Deep_Taxi__SAFE_COMMAND(
  Heading : real;
  CTE : real;
  Cmd : Deep_Taxi__Command__Impl
) returns (
  _outvar : bool
);
let
  _outvar = (if (Cmd.Speed = 0) then true else (if (((Heading + Cmd.Heading) >= (-90.0)) and ((Heading + Cmd.Heading) <= 90.0)) then (if ((CTE + Deep_Taxi__LINEAR_SIN((Heading + Cmd.Heading))) < 10.0) then true else false) else false));

tel;

node _CLOCKED_Deep_Taxi__SAFE_COMMAND(
  _CLK : bool;
  _INIT : bool;
  Heading : real;
  CTE : real;
  Cmd : Deep_Taxi__Command__Impl
) returns (
  _outvar : bool
);
let
  _outvar = (if _CLK then (if (Cmd.Speed = 0) then true else (if (((Heading + Cmd.Heading) >= (-90.0)) and ((Heading + Cmd.Heading) <= 90.0)) then (if ((CTE + _CLOCKED_Deep_Taxi__LINEAR_SIN(_CLK, _INIT, (Heading + Cmd.Heading))) < 10.0) then true else false) else false)) else (pre _outvar));

tel;

node __HIST(
  input : bool
) returns (
  hist : bool
);
let
  hist = (input -> ((pre hist) and input));

tel;

node __MinPos(
  a : real;
  b : real
) returns (
  ret : real
);
let
  ret = (if (a <= 0.0) then b else (if (b <= 0.0) then a else (if (a <= b) then a else b)));

tel;

node __Rise(
  input : bool
) returns (
  output : bool
);
let
  output = (input -> ((pre (not input)) and input));

tel;

node __Fall(
  input : bool
) returns (
  output : bool
);
let
  output = ((not input) -> ((pre input) and (not input)));

tel;

