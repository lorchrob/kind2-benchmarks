type Base_Types__Boolean = bool;
type Base_Types__Unsigned = int;
type Base_Types__Unsigned_64 = int;
type Base_Types__Unsigned_32 = int;
type Base_Types__Unsigned_16 = int;
type Base_Types__Unsigned_8 = int;
type Base_Types__Integer = int;
type Base_Types__Integer_64 = int;
type Base_Types__Integer_32 = int;
type Base_Types__Integer_16 = int;
type Base_Types__Integer_8 = int;
type Base_Types__Float = real;
type Base_Types__Float_32 = real;
type Base_Types__Float_64 = real;

node _TOP__Sender(
  __ASSUME__HIST : bool;
  in1 : real;
  in2 : real;
  time : real;
  sender_out : real
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
let
  __GUARANTEE0 = (sender_out = (in1 + in2));

  __ASSERT = (__ASSUME__HIST => __GUARANTEE0);

  --%IVC __GUARANTEE0;

tel;

node _TOP__receiver1(
  __ASSUME__HIST : bool;
  sender_input : real;
  time : real;
  output : real
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
let
  __GUARANTEE0 = (sender_input = output);

  __ASSERT = (__ASSUME__HIST => __GUARANTEE0);

  --%IVC __GUARANTEE0;

tel;

node _TOP__receiver2(
  __ASSUME__HIST : bool;
  sender_input : real;
  time : real;
  output : real
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
let
  __GUARANTEE0 = (sender_input = output);

  __ASSERT = (__ASSUME__HIST => __GUARANTEE0);

  --%IVC __GUARANTEE0;

tel;

node _TOP__receiver3(
  __ASSUME__HIST : bool;
  sender_input : real;
  time : real;
  output : real
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
let
  __GUARANTEE0 = (sender_input = output);

  __ASSERT = (__ASSUME__HIST => __GUARANTEE0);

  --%IVC __GUARANTEE0;

tel;

node main(
  Sender__sender_out : real;
  Sender____ASSUME__HIST : bool;
  receiver1__output : real;
  receiver1____ASSUME__HIST : bool;
  receiver2__output : real;
  receiver2____ASSUME__HIST : bool;
  receiver3__output : real;
  receiver3____ASSUME__HIST : bool;
  receiver1_output : real;
  receiver2_output : real;
  receiver3_output : real;
  Sender__in1 : real;
  Sender__in2 : real;
  Sender__time : real;
  receiver1__sender_input : real;
  receiver1__time : real;
  receiver2__sender_input : real;
  receiver2__time : real;
  receiver3__sender_input : real;
  receiver3__time : real;
  time : real
) returns (

);
var
  __ASSUME__HIST : bool;
  __GUARANTEE0 : bool;
let
  --%MAIN;
  __ASSUME__HIST = (receiver3____ASSUME__HIST and (receiver2____ASSUME__HIST and (receiver1____ASSUME__HIST and (Sender____ASSUME__HIST and true))));

  __GUARANTEE0 = ((receiver1_output = receiver2_output) and (receiver1_output = receiver3_output));

  assert (time = Sender__time);

  assert _TOP__Sender(Sender____ASSUME__HIST, Sender__in1, Sender__in2, Sender__time, Sender__sender_out);

  assert (Sender____ASSUME__HIST = __HIST(true));

  assert (time = receiver1__time);

  assert _TOP__receiver1(receiver1____ASSUME__HIST, receiver1__sender_input, receiver1__time, receiver1__output);

  assert (receiver1____ASSUME__HIST = __HIST(true));

  assert (time = receiver2__time);

  assert _TOP__receiver2(receiver2____ASSUME__HIST, receiver2__sender_input, receiver2__time, receiver2__output);

  assert (receiver2____ASSUME__HIST = __HIST(true));

  assert (time = receiver3__time);

  assert _TOP__receiver3(receiver3____ASSUME__HIST, receiver3__sender_input, receiver3__time, receiver3__output);

  assert (receiver3____ASSUME__HIST = __HIST(true));

  assert (Sender__sender_out = receiver1__sender_input);

  assert (Sender__sender_out = receiver2__sender_input);

  assert (Sender__sender_out = receiver3__sender_input);

  assert (receiver1__output = receiver1_output);

  assert (receiver2__output = receiver2_output);

  assert (receiver3__output = receiver3_output);

  assert true;

  assert (((time = 0.0) -> (time > (pre time))) and (true -> (time = ((pre time) + (time - (pre time))))));

  --%PROPERTY __ASSUME__HIST;
  --%PROPERTY __GUARANTEE0;

tel;

node __HIST(
  input : bool
) returns (
  hist : bool
);
let
  hist = (input -> ((pre hist) and input));

tel;

node __MinPos(
  a : real;
  b : real
) returns (
  ret : real
);
let
  ret = (if (a <= 0.0) then b else (if (b <= 0.0) then a else (if (a <= b) then a else b)));

tel;

node __Rise(
  input : bool
) returns (
  output : bool
);
let
  output = (input -> ((pre (not input)) and input));

tel;

node __Fall(
  input : bool
) returns (
  output : bool
);
let
  output = ((not input) -> ((pre input) and (not input)));

tel;

