type SW_props_no_lits__MissionWindow__Impl = struct {crc : bool; wps : SW_props_no_lits__Coordinate__Impl^4};
type SW_props_no_lits__Coordinate__Impl = struct {alt : int; lat : int; long : int};
type SW_props_no_lits__Command__Impl = struct {HMAC : bool; Map : SW_props_no_lits__Coordinate__Impl^4; Pattern : SW_props_no_lits__FlightPattern};
type SW_props_no_lits__FlightPattern = enum {SW_props_no_lits__FlightPattern_ZigZag, SW_props_no_lits__FlightPattern_StraightLine, SW_props_no_lits__FlightPattern_Perimeter};
type Base_Types__Boolean = bool;
type Base_Types__Unsigned = int;
type Base_Types__Unsigned_64 = int;
type Base_Types__Unsigned_32 = int;
type Base_Types__Unsigned_16 = int;
type Base_Types__Unsigned_8 = int;
type Base_Types__Integer = int;
type Base_Types__Integer_64 = int;
type Base_Types__Integer_32 = int;
type Base_Types__Integer_16 = int;
type Base_Types__Integer_8 = int;
type Base_Types__Float = real;
type Base_Types__Float_32 = real;
type Base_Types__Float_64 = real;

node _TOP__RADIO(
  __ASSUME__HIST : bool;
  __ASSUME0 : bool;
  __ASSUME1 : bool;
  __ASSUME2 : bool;
  recv_map_in___EVENT_ : bool;
  recv_map_in : SW_props_no_lits__Command__Impl;
  send_status_in___EVENT_ : bool;
  send_status_in : SW_props_no_lits__Coordinate__Impl;
  time : real;
  send_status_out___EVENT_ : bool;
  send_status_out : SW_props_no_lits__Coordinate__Impl;
  recv_map_out___EVENT_ : bool;
  recv_map_out : SW_props_no_lits__Command__Impl
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
  __GUARANTEE1 : bool;
  __GUARANTEE2 : bool;
let
  __GUARANTEE0 = (recv_map_out.HMAC = true);

  __GUARANTEE1 = ((true and (0 <= send_status_out.alt)) and (send_status_out.alt <= 15000));

  __GUARANTEE2 = ((((((((true and (0 <= recv_map_out.Map[0].alt)) and (recv_map_out.Map[0].alt <= 15000)) and (0 <= recv_map_out.Map[1].alt)) and (recv_map_out.Map[1].alt <= 15000)) and (0 <= recv_map_out.Map[2].alt)) and (recv_map_out.Map[2].alt <= 15000)) and (0 <= recv_map_out.Map[3].alt)) and (recv_map_out.Map[3].alt <= 15000));

  __ASSERT = ((__ASSUME__HIST => (__GUARANTEE2 and (__GUARANTEE1 and __GUARANTEE0))) and ((__ASSUME2 = ((true and (0 <= send_status_in.alt)) and (send_status_in.alt <= 15000))) and ((__ASSUME1 = ((((((((true and (0 <= recv_map_in.Map[0].alt)) and (recv_map_in.Map[0].alt <= 15000)) and (0 <= recv_map_in.Map[1].alt)) and (recv_map_in.Map[1].alt <= 15000)) and (0 <= recv_map_in.Map[2].alt)) and (recv_map_in.Map[2].alt <= 15000)) and (0 <= recv_map_in.Map[3].alt)) and (recv_map_in.Map[3].alt <= 15000))) and (__ASSUME0 = (recv_map_in.HMAC = true)))));

  --%IVC __GUARANTEE0, __GUARANTEE1, __GUARANTEE2;

tel;

node _TOP__FPLN(
  __ASSUME__HIST : bool;
  __ASSUME0 : bool;
  __ASSUME1 : bool;
  __ASSUME2 : bool;
  recv_map___EVENT_ : bool;
  recv_map : SW_props_no_lits__Command__Impl;
  position_status___EVENT_ : bool;
  position_status : SW_props_no_lits__Coordinate__Impl;
  time : real;
  flight_plan : SW_props_no_lits__Coordinate__Impl^10
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
let
  __GUARANTEE0 = ((((((((((((((((((((true and (0 <= flight_plan[0].alt)) and (flight_plan[0].alt <= 15000)) and (0 <= flight_plan[1].alt)) and (flight_plan[1].alt <= 15000)) and (0 <= flight_plan[2].alt)) and (flight_plan[2].alt <= 15000)) and (0 <= flight_plan[3].alt)) and (flight_plan[3].alt <= 15000)) and (0 <= flight_plan[4].alt)) and (flight_plan[4].alt <= 15000)) and (0 <= flight_plan[5].alt)) and (flight_plan[5].alt <= 15000)) and (0 <= flight_plan[6].alt)) and (flight_plan[6].alt <= 15000)) and (0 <= flight_plan[7].alt)) and (flight_plan[7].alt <= 15000)) and (0 <= flight_plan[8].alt)) and (flight_plan[8].alt <= 15000)) and (0 <= flight_plan[9].alt)) and (flight_plan[9].alt <= 15000));

  __ASSERT = ((__ASSUME__HIST => __GUARANTEE0) and ((__ASSUME2 = ((true and (0 <= position_status.alt)) and (position_status.alt <= 15000))) and ((__ASSUME1 = ((((((((true and (0 <= recv_map.Map[0].alt)) and (recv_map.Map[0].alt <= 15000)) and (0 <= recv_map.Map[1].alt)) and (recv_map.Map[1].alt <= 15000)) and (0 <= recv_map.Map[2].alt)) and (recv_map.Map[2].alt <= 15000)) and (0 <= recv_map.Map[3].alt)) and (recv_map.Map[3].alt <= 15000))) and (__ASSUME0 = (recv_map.HMAC = true)))));

  --%IVC __GUARANTEE0;

tel;

node _TOP__WPM(
  __ASSUME__HIST : bool;
  __ASSUME0 : bool;
  __ASSUME1 : bool;
  flight_plan : SW_props_no_lits__Coordinate__Impl^10;
  position_status___EVENT_ : bool;
  position_status : SW_props_no_lits__Coordinate__Impl;
  time : real;
  waypoint___EVENT_ : bool;
  waypoint : SW_props_no_lits__MissionWindow__Impl
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
let
  __GUARANTEE0 = ((((((((true and (0 <= waypoint.wps[0].alt)) and (waypoint.wps[0].alt <= 15000)) and (0 <= waypoint.wps[1].alt)) and (waypoint.wps[1].alt <= 15000)) and (0 <= waypoint.wps[2].alt)) and (waypoint.wps[2].alt <= 15000)) and (0 <= waypoint.wps[3].alt)) and (waypoint.wps[3].alt <= 15000));

  __ASSERT = ((__ASSUME__HIST => __GUARANTEE0) and ((__ASSUME1 = ((true and (0 <= position_status.alt)) and (position_status.alt <= 15000))) and (__ASSUME0 = ((((((((((((((((((((true and (0 <= flight_plan[0].alt)) and (flight_plan[0].alt <= 15000)) and (0 <= flight_plan[1].alt)) and (flight_plan[1].alt <= 15000)) and (0 <= flight_plan[2].alt)) and (flight_plan[2].alt <= 15000)) and (0 <= flight_plan[3].alt)) and (flight_plan[3].alt <= 15000)) and (0 <= flight_plan[4].alt)) and (flight_plan[4].alt <= 15000)) and (0 <= flight_plan[5].alt)) and (flight_plan[5].alt <= 15000)) and (0 <= flight_plan[6].alt)) and (flight_plan[6].alt <= 15000)) and (0 <= flight_plan[7].alt)) and (flight_plan[7].alt <= 15000)) and (0 <= flight_plan[8].alt)) and (flight_plan[8].alt <= 15000)) and (0 <= flight_plan[9].alt)) and (flight_plan[9].alt <= 15000)))));

  --%IVC __GUARANTEE0;

tel;

node _TOP__UART(
  __ASSUME__HIST : bool;
  __ASSUME0 : bool;
  __ASSUME1 : bool;
  position_status_in___EVENT_ : bool;
  position_status_in : SW_props_no_lits__Coordinate__Impl;
  waypoint_in___EVENT_ : bool;
  waypoint_in : SW_props_no_lits__MissionWindow__Impl;
  time : real;
  waypoint_out___EVENT_ : bool;
  waypoint_out : SW_props_no_lits__MissionWindow__Impl;
  position_status_out___EVENT_ : bool;
  position_status_out : SW_props_no_lits__Coordinate__Impl
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
  __GUARANTEE1 : bool;
  __GUARANTEE2 : bool;
let
  __GUARANTEE0 = (waypoint_out.crc = true);

  __GUARANTEE1 = ((((((((true and (0 <= waypoint_out.wps[0].alt)) and (waypoint_out.wps[0].alt <= 15000)) and (0 <= waypoint_out.wps[1].alt)) and (waypoint_out.wps[1].alt <= 15000)) and (0 <= waypoint_out.wps[2].alt)) and (waypoint_out.wps[2].alt <= 15000)) and (0 <= waypoint_out.wps[3].alt)) and (waypoint_out.wps[3].alt <= 15000));

  __GUARANTEE2 = ((true and (0 <= position_status_out.alt)) and (position_status_out.alt <= 15000));

  __ASSERT = ((__ASSUME__HIST => (__GUARANTEE2 and (__GUARANTEE1 and __GUARANTEE0))) and ((__ASSUME1 = ((((((((true and (0 <= waypoint_in.wps[0].alt)) and (waypoint_in.wps[0].alt <= 15000)) and (0 <= waypoint_in.wps[1].alt)) and (waypoint_in.wps[1].alt <= 15000)) and (0 <= waypoint_in.wps[2].alt)) and (waypoint_in.wps[2].alt <= 15000)) and (0 <= waypoint_in.wps[3].alt)) and (waypoint_in.wps[3].alt <= 15000))) and (__ASSUME0 = ((true and (0 <= position_status_in.alt)) and (position_status_in.alt <= 15000)))));

  --%IVC __GUARANTEE0, __GUARANTEE1, __GUARANTEE2;

tel;

node main(
  RADIO__send_status_out___EVENT_ : bool;
  RADIO__send_status_out : SW_props_no_lits__Coordinate__Impl;
  RADIO__recv_map_out___EVENT_ : bool;
  RADIO__recv_map_out : SW_props_no_lits__Command__Impl;
  RADIO____ASSUME0 : bool;
  RADIO____ASSUME1 : bool;
  RADIO____ASSUME2 : bool;
  RADIO____ASSUME__HIST : bool;
  FPLN__flight_plan : SW_props_no_lits__Coordinate__Impl^10;
  FPLN____ASSUME0 : bool;
  FPLN____ASSUME1 : bool;
  FPLN____ASSUME2 : bool;
  FPLN____ASSUME__HIST : bool;
  WPM__waypoint___EVENT_ : bool;
  WPM__waypoint : SW_props_no_lits__MissionWindow__Impl;
  WPM____ASSUME0 : bool;
  WPM____ASSUME1 : bool;
  WPM____ASSUME__HIST : bool;
  UART__waypoint_out___EVENT_ : bool;
  UART__waypoint_out : SW_props_no_lits__MissionWindow__Impl;
  UART__position_status_out___EVENT_ : bool;
  UART__position_status_out : SW_props_no_lits__Coordinate__Impl;
  UART____ASSUME0 : bool;
  UART____ASSUME1 : bool;
  UART____ASSUME__HIST : bool;
  send_status___EVENT_ : bool;
  send_status : SW_props_no_lits__Coordinate__Impl;
  waypoint___EVENT_ : bool;
  waypoint : SW_props_no_lits__MissionWindow__Impl;
  RADIO__recv_map_in___EVENT_ : bool;
  RADIO__recv_map_in : SW_props_no_lits__Command__Impl;
  RADIO__send_status_in___EVENT_ : bool;
  RADIO__send_status_in : SW_props_no_lits__Coordinate__Impl;
  RADIO__time : real;
  FPLN__recv_map___EVENT_ : bool;
  FPLN__recv_map : SW_props_no_lits__Command__Impl;
  FPLN__position_status___EVENT_ : bool;
  FPLN__position_status : SW_props_no_lits__Coordinate__Impl;
  FPLN__time : real;
  WPM__flight_plan : SW_props_no_lits__Coordinate__Impl^10;
  WPM__position_status___EVENT_ : bool;
  WPM__position_status : SW_props_no_lits__Coordinate__Impl;
  WPM__time : real;
  UART__position_status_in___EVENT_ : bool;
  UART__position_status_in : SW_props_no_lits__Coordinate__Impl;
  UART__waypoint_in___EVENT_ : bool;
  UART__waypoint_in : SW_props_no_lits__MissionWindow__Impl;
  UART__time : real;
  recv_map___EVENT_ : bool;
  recv_map : SW_props_no_lits__Command__Impl;
  position_status___EVENT_ : bool;
  position_status : SW_props_no_lits__Coordinate__Impl;
  time : real
) returns (

);
var
  __ASSUME0 : bool;
  __ASSUME1 : bool;
  __ASSUME2 : bool;
  __ASSUME__HIST : bool;
  __GUARANTEE0 : bool;
  __GUARANTEE1 : bool;
  __GUARANTEE2 : bool;
let
  --%MAIN;
  __ASSUME0 = (recv_map.HMAC = true);

  __ASSUME1 = ((((((((true and (0 <= recv_map.Map[0].alt)) and (recv_map.Map[0].alt <= 15000)) and (0 <= recv_map.Map[1].alt)) and (recv_map.Map[1].alt <= 15000)) and (0 <= recv_map.Map[2].alt)) and (recv_map.Map[2].alt <= 15000)) and (0 <= recv_map.Map[3].alt)) and (recv_map.Map[3].alt <= 15000));

  __ASSUME2 = ((true and (0 <= position_status.alt)) and (position_status.alt <= 15000));

  __ASSUME__HIST = (UART____ASSUME__HIST and (WPM____ASSUME__HIST and (FPLN____ASSUME__HIST and (RADIO____ASSUME__HIST and true))));

  __GUARANTEE0 = (waypoint.crc = true);

  __GUARANTEE1 = ((true and (0 <= send_status.alt)) and (send_status.alt <= 15000));

  __GUARANTEE2 = ((((((((true and (0 <= waypoint.wps[0].alt)) and (waypoint.wps[0].alt <= 15000)) and (0 <= waypoint.wps[1].alt)) and (waypoint.wps[1].alt <= 15000)) and (0 <= waypoint.wps[2].alt)) and (waypoint.wps[2].alt <= 15000)) and (0 <= waypoint.wps[3].alt)) and (waypoint.wps[3].alt <= 15000));

  assert __ASSUME0;

  assert __ASSUME1;

  assert __ASSUME2;

  assert (time = RADIO__time);

  assert _TOP__RADIO(RADIO____ASSUME__HIST, RADIO____ASSUME0, RADIO____ASSUME1, RADIO____ASSUME2, RADIO__recv_map_in___EVENT_, RADIO__recv_map_in, RADIO__send_status_in___EVENT_, RADIO__send_status_in, RADIO__time, RADIO__send_status_out___EVENT_, RADIO__send_status_out, RADIO__recv_map_out___EVENT_, RADIO__recv_map_out);

  assert (RADIO____ASSUME__HIST = __HIST(RADIO____ASSUME0));

  assert (time = FPLN__time);

  assert _TOP__FPLN(FPLN____ASSUME__HIST, FPLN____ASSUME0, FPLN____ASSUME1, FPLN____ASSUME2, FPLN__recv_map___EVENT_, FPLN__recv_map, FPLN__position_status___EVENT_, FPLN__position_status, FPLN__time, FPLN__flight_plan);

  assert (FPLN____ASSUME__HIST = __HIST(FPLN____ASSUME0));

  assert (time = WPM__time);

  assert _TOP__WPM(WPM____ASSUME__HIST, WPM____ASSUME0, WPM____ASSUME1, WPM__flight_plan, WPM__position_status___EVENT_, WPM__position_status, WPM__time, WPM__waypoint___EVENT_, WPM__waypoint);

  assert (WPM____ASSUME__HIST = __HIST(true));

  assert (time = UART__time);

  assert _TOP__UART(UART____ASSUME__HIST, UART____ASSUME0, UART____ASSUME1, UART__position_status_in___EVENT_, UART__position_status_in, UART__waypoint_in___EVENT_, UART__waypoint_in, UART__time, UART__waypoint_out___EVENT_, UART__waypoint_out, UART__position_status_out___EVENT_, UART__position_status_out);

  assert (UART____ASSUME__HIST = __HIST(true));

  assert (recv_map = RADIO__recv_map_in);

  assert (recv_map___EVENT_ = RADIO__recv_map_in___EVENT_);

  assert (position_status = UART__position_status_in);

  assert (position_status___EVENT_ = UART__position_status_in___EVENT_);

  assert (RADIO__send_status_out = send_status);

  assert (RADIO__send_status_out___EVENT_ = send_status___EVENT_);

  assert (RADIO__recv_map_out = FPLN__recv_map);

  assert (RADIO__recv_map_out___EVENT_ = FPLN__recv_map___EVENT_);

  assert (FPLN__flight_plan[0] = WPM__flight_plan[0]);
  assert (FPLN__flight_plan[1] = WPM__flight_plan[1]);
  assert (FPLN__flight_plan[2] = WPM__flight_plan[2]);
  assert (FPLN__flight_plan[3] = WPM__flight_plan[3]);
  assert (FPLN__flight_plan[4] = WPM__flight_plan[4]);
  assert (FPLN__flight_plan[5] = WPM__flight_plan[5]);
  assert (FPLN__flight_plan[6] = WPM__flight_plan[6]);
  assert (FPLN__flight_plan[7] = WPM__flight_plan[7]);
  assert (FPLN__flight_plan[8] = WPM__flight_plan[8]);
  assert (FPLN__flight_plan[9] = WPM__flight_plan[9]);


  assert (WPM__waypoint = UART__waypoint_in);

  assert (WPM__waypoint___EVENT_ = UART__waypoint_in___EVENT_);

  assert (UART__waypoint_out = waypoint);

  assert (UART__waypoint_out___EVENT_ = waypoint___EVENT_);

  assert (UART__position_status_out = WPM__position_status);

  assert (UART__position_status_out___EVENT_ = WPM__position_status___EVENT_);

  assert (UART__position_status_out = FPLN__position_status);

  assert (UART__position_status_out___EVENT_ = FPLN__position_status___EVENT_);

  assert (UART__position_status_out = RADIO__send_status_in);

  assert (UART__position_status_out___EVENT_ = RADIO__send_status_in___EVENT_);

  assert true;

  assert (((time = 0.0) -> (time > (pre time))) and (true -> (time = ((pre time) + (time - (pre time))))));

  -- %PROPERTY RADIO____ASSUME0;
  --%PROPERTY FPLN____ASSUME0;
  -- %PROPERTY __ASSUME__HIST;
  -- %PROPERTY __GUARANTEE0;
  -- %PROPERTY __GUARANTEE1;
  -- %PROPERTY __GUARANTEE2;

  --%IVC __ASSUME0, __ASSUME1, __ASSUME2;

tel;

node __HIST(
  input : bool
) returns (
  hist : bool
);
let
  hist = (input -> ((pre hist) and input));

tel;

node __MinPos(
  a : real;
  b : real
) returns (
  ret : real
);
let
  ret = (if (a <= 0.0) then b else (if (b <= 0.0) then a else (if (a <= b) then a else b)));

tel;

node __Rise(
  input : bool
) returns (
  output : bool
);
let
  output = (input -> ((pre (not input)) and input));

tel;

node __Fall(
  input : bool
) returns (
  output : bool
);
let
  output = ((not input) -> ((pre input) and (not input)));

tel;

