type Monitors__Status_Message__Impl = struct {CTE_1_Sigma_Bound : real; CTE_Estimate : real; CTE_High_Confidence_Bound : real; Monitor_Available : bool; Safe_At_Tstop_95 : bool; Safe_At_Tstop_99 : bool; Safe_Now : bool};
type Base_Types__Boolean = bool;
type Base_Types__Unsigned = int;
type Base_Types__Unsigned_64 = int;
type Base_Types__Unsigned_32 = int;
type Base_Types__Unsigned_16 = int;
type Base_Types__Unsigned_8 = int;
type Base_Types__Integer = int;
type Base_Types__Integer_64 = int;
type Base_Types__Integer_32 = int;
type Base_Types__Integer_16 = int;
type Base_Types__Integer_8 = int;
type Base_Types__Float = real;
type Base_Types__Float_32 = real;
type Base_Types__Float_64 = real;

node _TOP__Boeing_Vehicle_Actuation(
  __ASSUME__HIST : bool;
  Camera___EVENT_ : bool;
  Slow___EVENT_ : bool;
  Slow : bool;
  Halt___EVENT_ : bool;
  Halt : bool;
  time : real;
  Actuation_Command___EVENT_ : bool;
  Actuation_Command : int
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
let
  __GUARANTEE0 = (Actuation_Command > 0);

  __ASSERT = (__ASSUME__HIST => __GUARANTEE0);

  --%IVC __GUARANTEE0;

tel;

node _TOP__Kestrel_Components(
  __ASSUME__HIST : bool;
  GPS_Monitor___EVENT_ : bool;
  GPS_Monitor : Monitors__Status_Message__Impl;
  CV_Monitor___EVENT_ : bool;
  CV_Monitor : Monitors__Status_Message__Impl;
  IRS_Monitor___EVENT_ : bool;
  IRS_Monitor : Monitors__Status_Message__Impl;
  ISSM1___EVENT_ : bool;
  ISSM1 : int;
  LEC_Confidence___EVENT_ : bool;
  LEC_Confidence : bool;
  time : real;
  no_mon_avail : bool;
  Slow___EVENT_ : bool;
  Slow : bool;
  Halt___EVENT_ : bool;
  Halt : bool
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
let
  __GUARANTEE0 = (no_mon_avail => Halt);

  __ASSERT = ((no_mon_avail = (false -> (pre (not ((GPS_Monitor.Monitor_Available or CV_Monitor.Monitor_Available) or IRS_Monitor.Monitor_Available))))) and (__ASSUME__HIST => __GUARANTEE0));

  --%IVC __GUARANTEE0;

tel;

node main(
  Boeing_Vehicle_Actuation__Actuation_Command___EVENT_ : bool;
  Boeing_Vehicle_Actuation__Actuation_Command : int;
  Boeing_Vehicle_Actuation____ASSUME__HIST : bool;
  Kestrel_Components__no_mon_avail : bool;
  Kestrel_Components__Slow___EVENT_ : bool;
  Kestrel_Components__Slow : bool;
  Kestrel_Components__Halt___EVENT_ : bool;
  Kestrel_Components__Halt : bool;
  Kestrel_Components____ASSUME__HIST : bool;
  Actuation_Command___EVENT_ : bool;
  Actuation_Command : int;
  Boeing_Vehicle_Actuation__Camera___EVENT_ : bool;
  Boeing_Vehicle_Actuation__Slow___EVENT_ : bool;
  Boeing_Vehicle_Actuation__Slow : bool;
  Boeing_Vehicle_Actuation__Halt___EVENT_ : bool;
  Boeing_Vehicle_Actuation__Halt : bool;
  Boeing_Vehicle_Actuation__time : real;
  Kestrel_Components__GPS_Monitor___EVENT_ : bool;
  Kestrel_Components__GPS_Monitor : Monitors__Status_Message__Impl;
  Kestrel_Components__CV_Monitor___EVENT_ : bool;
  Kestrel_Components__CV_Monitor : Monitors__Status_Message__Impl;
  Kestrel_Components__IRS_Monitor___EVENT_ : bool;
  Kestrel_Components__IRS_Monitor : Monitors__Status_Message__Impl;
  Kestrel_Components__ISSM1___EVENT_ : bool;
  Kestrel_Components__ISSM1 : int;
  Kestrel_Components__LEC_Confidence___EVENT_ : bool;
  Kestrel_Components__LEC_Confidence : bool;
  Kestrel_Components__time : real;
  Camera___EVENT_ : bool;
  GPS___EVENT_ : bool;
  IRS___EVENT_ : bool;
  time : real
) returns (

);
var
  __ASSUME__HIST : bool;
  __GUARANTEE0 : bool;
let
  --%MAIN;
  __ASSUME__HIST = (Kestrel_Components____ASSUME__HIST and (Boeing_Vehicle_Actuation____ASSUME__HIST and true));

  __GUARANTEE0 = (Actuation_Command > 0);

  assert (time = Boeing_Vehicle_Actuation__time);

  assert _TOP__Boeing_Vehicle_Actuation(Boeing_Vehicle_Actuation____ASSUME__HIST, Boeing_Vehicle_Actuation__Camera___EVENT_, Boeing_Vehicle_Actuation__Slow___EVENT_, Boeing_Vehicle_Actuation__Slow, Boeing_Vehicle_Actuation__Halt___EVENT_, Boeing_Vehicle_Actuation__Halt, Boeing_Vehicle_Actuation__time, Boeing_Vehicle_Actuation__Actuation_Command___EVENT_, Boeing_Vehicle_Actuation__Actuation_Command);

  assert (Boeing_Vehicle_Actuation____ASSUME__HIST = __HIST(true));

  assert (time = Kestrel_Components__time);

  assert _TOP__Kestrel_Components(Kestrel_Components____ASSUME__HIST, Kestrel_Components__GPS_Monitor___EVENT_, Kestrel_Components__GPS_Monitor, Kestrel_Components__CV_Monitor___EVENT_, Kestrel_Components__CV_Monitor, Kestrel_Components__IRS_Monitor___EVENT_, Kestrel_Components__IRS_Monitor, Kestrel_Components__ISSM1___EVENT_, Kestrel_Components__ISSM1, Kestrel_Components__LEC_Confidence___EVENT_, Kestrel_Components__LEC_Confidence, Kestrel_Components__time, Kestrel_Components__no_mon_avail, Kestrel_Components__Slow___EVENT_, Kestrel_Components__Slow, Kestrel_Components__Halt___EVENT_, Kestrel_Components__Halt);

  assert (Kestrel_Components____ASSUME__HIST = __HIST(true));

  assert (Camera___EVENT_ = Boeing_Vehicle_Actuation__Camera___EVENT_);

  assert (Boeing_Vehicle_Actuation__Actuation_Command = Actuation_Command);

  assert (Boeing_Vehicle_Actuation__Actuation_Command___EVENT_ = Actuation_Command___EVENT_);

  assert (Kestrel_Components__Slow = Boeing_Vehicle_Actuation__Slow);

  assert (Kestrel_Components__Slow___EVENT_ = Boeing_Vehicle_Actuation__Slow___EVENT_);

  assert (Kestrel_Components__Halt = Boeing_Vehicle_Actuation__Halt);

  assert (Kestrel_Components__Halt___EVENT_ = Boeing_Vehicle_Actuation__Halt___EVENT_);

  assert true;

  assert (((time = 0.0) -> (time > (pre time))) and (true -> (time = ((pre time) + (time - (pre time))))));

  --%PROPERTY __ASSUME__HIST;
  -- %PROPERTY __GUARANTEE0;

tel;

node __HIST(
  input : bool
) returns (
  hist : bool
);
let
  hist = (input -> ((pre hist) and input));

tel;

node __MinPos(
  a : real;
  b : real
) returns (
  ret : real
);
let
  ret = (if (a <= 0.0) then b else (if (b <= 0.0) then a else (if (a <= b) then a else b)));

tel;

node __Rise(
  input : bool
) returns (
  output : bool
);
let
  output = (input -> ((pre (not input)) and input));

tel;

node __Fall(
  input : bool
) returns (
  output : bool
);
let
  output = ((not input) -> ((pre input) and (not input)));

tel;

