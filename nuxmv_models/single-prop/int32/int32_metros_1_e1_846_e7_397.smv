
MODULE hypothese (hypothese-usr-B, hypothese-usr-S, hypothese-usr-avance, hypothese-usr-retard)
VAR
	hypothese-usr-ok : boolean;
	hypothese-impl-usr-c : signed word[32];

ASSIGN
	init(hypothese-usr-ok) := TRUE;
	init(hypothese-impl-usr-c) := 0sh32_00000000;

	next(hypothese-usr-ok) := ((hypothese-usr-retard ? !next(hypothese-usr-S) : TRUE) & ((hypothese-impl-usr-c >= 0sh32_00000009) ? !next(hypothese-usr-B) : TRUE));
	next(hypothese-impl-usr-c) := ((hypothese-usr-avance & next(hypothese-usr-avance)) ? (next(hypothese-usr-B) ? ((hypothese-impl-usr-c + 0sh32_00000001) + 0sh32_00000001) : hypothese-impl-usr-c) : 0sh32_00000000);



MODULE controleur (controleur-usr-nB, controleur-usr-nS)
VAR
	controleur-usr-diff : signed word[32];
	controleur-usr-avance : boolean;
	controleur-usr-retard : boolean;

ASSIGN
	init(controleur-usr-diff) := (controleur-usr-nB - controleur-usr-nS);
	init(controleur-usr-avance) := FALSE;
	init(controleur-usr-retard) := FALSE;

	next(controleur-usr-diff) := (next(controleur-usr-nB) - next(controleur-usr-nS));
	next(controleur-usr-avance) := (!controleur-usr-avance ? (next(controleur-usr-diff) >= 0sh32_0000000A) : (next(controleur-usr-diff) > 0sh32_00000000));
	next(controleur-usr-retard) := (!controleur-usr-retard ? (next(controleur-usr-diff) <= -0sh32_0000000A) : (next(controleur-usr-diff) < 0sh32_00000000));



MODULE main2 (main-usr-B0, main-usr-B1, main-usr-S)
VAR
	main-usr-ast : boolean;
	main-usr-nB0 : signed word[32];
	main-usr-nB1 : signed word[32];
	main-usr-nS : signed word[32];
	main-usr-diff0 : signed word[32];
	main-usr-diff1 : signed word[32];
	main-usr-avance0 : boolean;
	main-usr-avance1 : boolean;
	main-usr-retard0 : boolean;
	main-usr-retard1 : boolean;
	main-impl-usr-H0 : boolean;
	main-impl-usr-H1 : boolean;
	main-res-2-call_4 : controleur(main-usr-nB1, main-usr-nS);
	main-res-2-call_3 : controleur(main-usr-nB0, main-usr-nS);
	main-res-call_2 : hypothese(main-usr-B1, main-usr-S, main-usr-avance1, main-usr-retard1);
	main-res-call_1 : hypothese(main-usr-B0, main-usr-S, main-usr-avance0, main-usr-retard0);

ASSIGN
	init(main-impl-usr-H1) := main-res-call_2.hypothese-usr-ok;
	init(main-impl-usr-H0) := main-res-call_1.hypothese-usr-ok;
	init(main-usr-ast) := (main-impl-usr-H0 & main-impl-usr-H1);
	init(main-usr-avance0) := main-res-2-call_3.controleur-usr-avance;
	init(main-usr-nB0) := 0sh32_00000000;
	init(main-usr-nS) := 0sh32_00000000;
	init(main-usr-retard0) := main-res-2-call_3.controleur-usr-retard;
	init(main-usr-avance1) := main-res-2-call_4.controleur-usr-avance;
	init(main-usr-nB1) := 0sh32_00000000;
	init(main-usr-retard1) := main-res-2-call_4.controleur-usr-retard;
	init(main-usr-diff0) := main-res-2-call_3.controleur-usr-diff;
	init(main-usr-diff1) := main-res-2-call_4.controleur-usr-diff;

	next(main-impl-usr-H1) := next(main-res-call_2.hypothese-usr-ok);
	next(main-impl-usr-H0) := next(main-res-call_1.hypothese-usr-ok);
	next(main-usr-ast) := (next(main-impl-usr-H0) & next(main-impl-usr-H1));
	next(main-usr-nS) := (next(main-usr-S) ? (main-usr-nS + 0sh32_00000001) : main-usr-nS);
	next(main-usr-nB0) := (next(main-usr-B0) ? (main-usr-nB0 + 0sh32_00000001) : main-usr-nB0);
	next(main-usr-avance0) := next(main-res-2-call_3.controleur-usr-avance);
	next(main-usr-retard0) := next(main-res-2-call_3.controleur-usr-retard);
	next(main-usr-nB1) := (next(main-usr-B1) ? (main-usr-nB1 + 0sh32_00000001) : main-usr-nB1);
	next(main-usr-avance1) := next(main-res-2-call_4.controleur-usr-avance);
	next(main-usr-retard1) := next(main-res-2-call_4.controleur-usr-retard);
	next(main-usr-diff0) := next(main-res-2-call_3.controleur-usr-diff);
	next(main-usr-diff1) := next(main-res-2-call_4.controleur-usr-diff);



MODULE Sofar (Sofar-usr-X)
VAR
	Sofar-usr-Sofar : boolean;

ASSIGN
	init(Sofar-usr-Sofar) := Sofar-usr-X;
	next(Sofar-usr-Sofar) := (Sofar-usr-Sofar | next(Sofar-usr-X));



MODULE main () 
VAR
	top-usr-B0 : boolean;
	top-usr-B1 : boolean;
	top-usr-S : boolean;
	top-usr-OK : boolean;
	top-impl-usr-nB0 : signed word[32];
	top-impl-usr-nB1 : signed word[32];
	top-impl-usr-nS : signed word[32];
	top-impl-usr-diff0 : signed word[32];
	top-impl-usr-diff1 : signed word[32];
	top-impl-usr-avance0 : boolean;
	top-impl-usr-avance1 : boolean;
	top-impl-usr-retard0 : boolean;
	top-impl-usr-retard1 : boolean;
	top-impl-usr-pOK : boolean;
	top-impl-usr-ast : boolean;
	top-res-gklocal_6 : boolean;
	top-res-call_7 : Sofar(top-res-gklocal_6);
	top-res-2-call_5 : main2(top-usr-B0, top-usr-B1, top-usr-S);

ASSIGN
	init(top-usr-OK) := TRUE;
	init(top-impl-usr-pOK) := TRUE;
	init(top-impl-usr-avance0) := top-res-2-call_5.main-usr-avance0;
	init(top-impl-usr-retard0) := top-res-2-call_5.main-usr-retard0;
	init(top-impl-usr-ast) := top-res-2-call_5.main-usr-ast;
	init(top-impl-usr-diff0) := top-res-2-call_5.main-usr-diff0;
	init(top-impl-usr-nS) := top-res-2-call_5.main-usr-nS;
	init(top-impl-usr-nB1) := top-res-2-call_5.main-usr-nB1;
	init(top-impl-usr-nB0) := top-res-2-call_5.main-usr-nB0;
	init(top-res-gklocal_6) := ((((top-impl-usr-ast & (top-impl-usr-nB0 < 0sh32_00000001)) & (top-impl-usr-nB1 < 0sh32_00000001)) & (top-impl-usr-nS < 0sh32_00000001)) & (top-impl-usr-diff0 < 0sh32_00007FFF));
	init(top-impl-usr-diff1) := top-res-2-call_5.main-usr-diff1;
	init(top-impl-usr-avance1) := top-res-2-call_5.main-usr-avance1;
	init(top-impl-usr-retard1) := top-res-2-call_5.main-usr-retard1;

	next(top-impl-usr-ast) := next(top-res-2-call_5.main-usr-ast);
	next(top-impl-usr-diff0) := next(top-res-2-call_5.main-usr-diff0);
	next(top-impl-usr-nS) := next(top-res-2-call_5.main-usr-nS);
	next(top-impl-usr-nB1) := next(top-res-2-call_5.main-usr-nB1);
	next(top-impl-usr-nB0) := next(top-res-2-call_5.main-usr-nB0);
	next(top-res-gklocal_6) := ((((next(top-impl-usr-ast) & (next(top-impl-usr-nB0) < 0sh32_00000001)) & (next(top-impl-usr-nB1) < 0sh32_00000001)) & (next(top-impl-usr-nS) < 0sh32_00000001)) & (next(top-impl-usr-diff0) < 0sh32_00007FFF));
	next(top-usr-OK) := (next(top-res-call_7.Sofar-usr-Sofar) -> top-impl-usr-pOK);
	next(top-impl-usr-retard0) := next(top-res-2-call_5.main-usr-retard0);
	next(top-impl-usr-avance0) := next(top-res-2-call_5.main-usr-avance0);
	next(top-impl-usr-pOK) := !((top-impl-usr-retard0 & next(top-impl-usr-avance0)) | (top-impl-usr-avance0 & next(top-impl-usr-retard0)));
	next(top-impl-usr-diff1) := next(top-res-2-call_5.main-usr-diff1);
	next(top-impl-usr-avance1) := next(top-res-2-call_5.main-usr-avance1);
	next(top-impl-usr-retard1) := next(top-res-2-call_5.main-usr-retard1);


INVARSPEC 
((top-usr-OK));

