
MODULE Store (Store-usr-Delta)
VAR
	Store-usr-Total : integer;
ASSIGN
	init(Store-usr-Total) := (((Store-usr-Delta < 0) & (0 > 0)) ? 0 + Store-usr-Delta : (((Store-usr-Delta > 0) & (0 < 10)) ? 0 + Store-usr-Delta : 0));

	next(Store-usr-Total) := (((next(Store-usr-Delta) < 0) & (Store-usr-Total > 0)) ? Store-usr-Total + next(Store-usr-Delta) : (((next(Store-usr-Delta) > 0) & (Store-usr-Total < 10)) ? Store-usr-Total + next(Store-usr-Delta) : Store-usr-Total));



MODULE Sofar (Sofar-usr-X)
VAR
	Sofar-usr-Y : boolean;
ASSIGN
	init(Sofar-usr-Y) := Sofar-usr-X;
	next(Sofar-usr-Y) := (Sofar-usr-Y & next(Sofar-usr-X));



MODULE main () 
VAR
	top-usr-Delta : integer;	top-usr-OK : boolean;	top-res-gklocal_2 : boolean;	top-res-call_3 : Sofar(top-res-gklocal_2);
	top-res-call_1 : Store(top-usr-Delta);

ASSIGN
	init(top-res-gklocal_2) := (-1 <= top-usr-Delta & top-usr-Delta <= 1);
	init(top-usr-OK) := (top-res-call_3.Sofar-usr-Y -> (0 <= top-res-call_1.Store-usr-Total & top-res-call_1.Store-usr-Total <= 20));

	next(top-res-gklocal_2) := (-1 <= next(top-usr-Delta) & next(top-usr-Delta) <= 1);
	next(top-usr-OK) := (next(top-res-call_3.Sofar-usr-Y) -> (0 <= next(top-res-call_1.Store-usr-Total) & next(top-res-call_1.Store-usr-Total) <= 20));


INVARSPEC 
((top-usr-OK));

